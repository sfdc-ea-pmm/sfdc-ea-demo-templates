{
  "name" : "Forecast_Analysis_tp",
  "label" : "MFG Demo - Forecast Analysis",
  "folder" : {
    "id" : "${App.Folder.Id}"
  },
  "dateVersion" : 1,
  "mobileDisabled" : false,
  "xmd" : {
    "measures" : [
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Cumulative_Percent",
            "type" : "static",
            "parameters" : {
              "formatValue" : "rgb(52, 127, 219)"
            }
          }
        },
        "field" : "Forecast_Change_by_P_1.Cumulative_Percent",
        "format" : {
          "delimiters" : { }
        }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Apr_Percent",
            "type" : "static",
            "parameters" : {
              "formatValue" : "rgb(139, 82, 241)"
            }
          }
        },
        "field" : "Forecast_Change_by_P_1.Apr_Percent",
        "format" : {
          "delimiters" : { }
        }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Mar_Percent",
            "type" : "static",
            "parameters" : {
              "formatValue" : "rgb(77, 169, 163)"
            }
          }
        },
        "field" : "Forecast_Change_by_P_1.Mar_Percent",
        "format" : {
          "delimiters" : { }
        }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Feb_Percent",
            "type" : "static",
            "parameters" : {
              "formatValue" : "rgb(185, 152, 246)"
            }
          }
        },
        "field" : "Forecast_Change_by_P_1.Feb_Percent",
        "format" : {
          "delimiters" : { }
        }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Jan_Percent",
            "type" : "static",
            "parameters" : {
              "formatValue" : "rgb(216, 36, 140)"
            }
          }
        },
        "field" : "Forecast_Change_by_P_1.Jan_Percent",
        "format" : {
          "delimiters" : { }
        }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Dec_Percent",
            "type" : "static",
            "parameters" : {
              "formatValue" : "rgb(27, 92, 173)"
            }
          }
        },
        "field" : "Forecast_Change_by_P_1.Dec_Percent",
        "format" : {
          "delimiters" : { }
        }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Nov_Percent",
            "type" : "static",
            "parameters" : {
              "formatValue" : "rgb(117, 171, 231)"
            }
          }
        },
        "field" : "Forecast_Change_by_P_1.Nov_Percent",
        "format" : {
          "delimiters" : { }
        }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Oct_Percent",
            "type" : "static",
            "parameters" : {
              "formatValue" : "rgb(97, 58, 168)"
            }
          }
        },
        "field" : "Forecast_Change_by_P_1.Oct_Percent",
        "format" : {
          "delimiters" : { }
        }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Sep_Percent",
            "type" : "static",
            "parameters" : {
              "formatValue" : "rgb(126, 217, 122)"
            }
          }
        },
        "field" : "Forecast_Change_by_P_1.Sep_Percent",
        "format" : {
          "delimiters" : { }
        }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Aug_Percent",
            "type" : "static",
            "parameters" : {
              "formatValue" : "rgb(5, 120, 112)"
            }
          }
        },
        "field" : "Forecast_Change_by_P_1.Aug_Percent",
        "format" : {
          "delimiters" : { }
        }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Jul_Percent",
            "type" : "static",
            "parameters" : {
              "formatValue" : "rgb(30, 168, 26)"
            }
          }
        },
        "field" : "Forecast_Change_by_P_1.Jul_Percent",
        "format" : {
          "delimiters" : { }
        }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Jun_Percent",
            "type" : "static",
            "parameters" : {
              "formatValue" : "rgb(254, 212, 68)"
            }
          }
        },
        "field" : "Forecast_Change_by_P_1.Jun_Percent",
        "format" : {
          "delimiters" : { }
        }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "May_Percent",
            "type" : "static",
            "parameters" : {
              "formatValue" : "rgb(234, 183, 24)"
            }
          }
        },
        "field" : "Forecast_Change_by_P_1.May_Percent",
        "format" : {
          "delimiters" : { }
        }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Apr_Measure",
            "type" : "static",
            "parameters" : {
              "formatValue" : "rgb(139, 82, 241)"
            }
          }
        },
        "field" : "Forecast_Change_Tren_1.Apr_Measure",
        "format" : {
          "delimiters" : { }
        }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Mar_Measure",
            "type" : "static",
            "parameters" : {
              "formatValue" : "rgb(77, 169, 163)"
            }
          }
        },
        "field" : "Forecast_Change_Tren_1.Mar_Measure",
        "format" : {
          "delimiters" : { }
        }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Feb_Measure",
            "type" : "static",
            "parameters" : {
              "formatValue" : "rgb(185, 152, 246)"
            }
          }
        },
        "field" : "Forecast_Change_Tren_1.Feb_Measure",
        "format" : {
          "delimiters" : { }
        }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Jan_Measure",
            "type" : "static",
            "parameters" : {
              "formatValue" : "rgb(216, 36, 140)"
            }
          }
        },
        "field" : "Forecast_Change_Tren_1.Jan_Measure",
        "format" : {
          "delimiters" : { }
        }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Dec_Measure",
            "type" : "static",
            "parameters" : {
              "formatValue" : "rgb(27, 92, 173)"
            }
          }
        },
        "field" : "Forecast_Change_Tren_1.Dec_Measure",
        "format" : {
          "delimiters" : { }
        }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Nov_Measure",
            "type" : "static",
            "parameters" : {
              "formatValue" : "rgb(117, 171, 231)"
            }
          }
        },
        "field" : "Forecast_Change_Tren_1.Nov_Measure",
        "format" : {
          "delimiters" : { }
        }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Oct_Measure",
            "type" : "static",
            "parameters" : {
              "formatValue" : "rgb(97, 58, 168)"
            }
          }
        },
        "field" : "Forecast_Change_Tren_1.Oct_Measure",
        "format" : {
          "delimiters" : { }
        }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Sep_Measure",
            "type" : "static",
            "parameters" : {
              "formatValue" : "rgb(126, 217, 122)"
            }
          }
        },
        "field" : "Forecast_Change_Tren_1.Sep_Measure",
        "format" : {
          "delimiters" : { }
        }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Aug_Measure",
            "type" : "static",
            "parameters" : {
              "formatValue" : "rgb(5, 120, 112)"
            }
          }
        },
        "field" : "Forecast_Change_Tren_1.Aug_Measure",
        "format" : {
          "delimiters" : { }
        }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Jul_Measure",
            "type" : "static",
            "parameters" : {
              "formatValue" : "rgb(30, 168, 26)"
            }
          }
        },
        "field" : "Forecast_Change_Tren_1.Jul_Measure",
        "format" : {
          "delimiters" : { }
        }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Jun_Measure",
            "type" : "static",
            "parameters" : {
              "formatValue" : "rgb(254, 212, 68)"
            }
          }
        },
        "field" : "Forecast_Change_Tren_1.Jun_Measure",
        "format" : {
          "delimiters" : { }
        }
      },
      {
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "May_Measure",
            "type" : "static",
            "parameters" : {
              "formatValue" : "rgb(234, 183, 24)"
            }
          }
        },
        "field" : "Forecast_Change_Tren_1.May_Measure",
        "format" : {
          "delimiters" : { }
        }
      },
      {
        "conditionalFormatting" : { },
        "field" : "MAPE_by_Accounts_1.amount_mape",
        "format" : {
          "delimiters" : { }
        }
      },
      {
        "conditionalFormatting" : { },
        "field" : "MAPE_by_Accounts_1.amount_mape_before_adj",
        "format" : {
          "delimiters" : { }
        }
      },
      {
        "conditionalFormatting" : { },
        "field" : "MAPE_by_Accounts_1.amount_mape_cumulative",
        "format" : {
          "delimiters" : { }
        }
      }
    ],
    "derivedDimensions" : [ ],
    "organizations" : [ ],
    "showDetailsDefaultFields" : [ ],
    "dates" : [ ],
    "derivedMeasures" : [ ],
    "dimensions" : [
      {
        "recordDisplayFields" : [ ],
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Cumulative_Percent",
            "type" : "static",
            "parameters" : {
              "formatValue" : "rgb(52, 127, 219)"
            }
          }
        },
        "salesforceActions" : [ ],
        "field" : "Forecast_Change_by_P_1.ALL",
        "members" : [ ],
        "customActions" : [ ]
      },
      {
        "recordDisplayFields" : [ ],
        "conditionalFormatting" : {
          "chartColor" : {
            "referenceField" : "Apr_Measure",
            "type" : "static",
            "parameters" : {
              "formatValue" : "rgb(139, 82, 241)"
            }
          }
        },
        "salesforceActions" : [ ],
        "field" : "Forecast_Change_Tren_1.ALL",
        "members" : [ ],
        "customActions" : [ ]
      },
      {
        "recordDisplayFields" : [ ],
        "conditionalFormatting" : { },
        "salesforceActions" : [ ],
        "field" : "MAPE_by_Accounts_1.ALL",
        "members" : [ ],
        "customActions" : [ ]
      }
    ]
  },
  "state" : {
    "dataSourceLinks" : [
      {
        "fields" : [
          {
            "dataSourceName" : "${App.Datasets.MFG_Demo_Data.Name}",
            "dataSourceNamespace" : "${Org.Namespace}",
            "dataSourceType" : "saql",
            "fieldName" : "AccountName"
          },
          {
            "dataSourceName" : "${App.Datasets.MFG_Order_Product.Name}",
            "dataSourceNamespace" : "${Org.Namespace}",
            "dataSourceType" : "saql",
            "fieldName" : "OrderAccountName"
          }
        ],
        "label" : "Account Name - AccProdPeriodForecast and OrderProducts",
        "name" : "Link_1020"
      },
      {
        "fields" : [
          {
            "dataSourceName" : "${App.Datasets.MFG_Demo_Data.Name}",
            "dataSourceNamespace" : "${Org.Namespace}",
            "dataSourceType" : "saql",
            "fieldName" : "ProductFamily"
          },
          {
            "dataSourceName" : "${App.Datasets.MFG_Order_Product.Name}",
            "dataSourceNamespace" : "${Org.Namespace}",
            "dataSourceType" : "saql",
            "fieldName" : "ProductFamily"
          }
        ],
        "label" : "Product Family - AccountProdPeriodForecasts & OrderProducts",
        "name" : "Link_1299"
      },
      {
        "fields" : [
          {
            "dataSourceName" : "${App.Datasets.MFG_Demo_Data.Name}",
            "dataSourceNamespace" : "${Org.Namespace}",
            "dataSourceType" : "saql",
            "fieldName" : "ProductName"
          },
          {
            "dataSourceName" : "${App.Datasets.MFG_Order_Product.Name}",
            "dataSourceNamespace" : "${Org.Namespace}",
            "dataSourceType" : "saql",
            "fieldName" : "ProductName"
          }
        ],
        "label" : "Product Name - AccountProdPeriodForecasts & OrderProducts",
        "name" : "Link_1278"
      },
      {
        "fields" : [
          {
            "dataSourceName" : "${App.Datasets.MFG_Demo_Data.Name}",
            "dataSourceNamespace" : "${Org.Namespace}",
            "dataSourceType" : "saql",
            "fieldName" : "ProductName"
          },
          {
            "dataSourceName" : "${App.Datasets.MFG_Order_Product.Name}",
            "dataSourceNamespace" : "${Org.Namespace}",
            "dataSourceType" : "saql",
            "fieldName" : "ProductName"
          }
        ],
        "label" : "Product Name - Forecast and Orders",
        "name" : "Link_3313"
      },
      {
        "fields" : [
          {
            "dataSourceName" : "${App.Datasets.MFG_Demo_Data.Name}",
            "dataSourceNamespace" : "${Org.Namespace}",
            "dataSourceType" : "saql",
            "fieldName" : "ParentName"
          },
          {
            "dataSourceName" : "${App.Datasets.MFG_Order_Product.Name}",
            "dataSourceNamespace" : "${Org.Namespace}",
            "dataSourceType" : "saql",
            "fieldName" : "OrderAccountParent"
          }
        ],
        "label" : "Parent_Account",
        "name" : "Link_1957"
      }
    ],
    "filters" : [ ],
    "gridLayouts" : [
      {
        "maxWidth" : 1500,
        "name" : "Default",
        "numColumns" : 50,
        "pages" : [
          {
            "label" : "Accuracy",
            "name" : "dcc70e5d-3908-4426-8ac5-f99fe142f5c1",
            "navigationHidden" : false,
            "widgets" : [
              {
                "colspan" : 10,
                "column" : 0,
                "name" : "container_3",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 2,
                "column" : 1,
                "name" : "image_1",
                "row" : 1,
                "rowspan" : 5,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 7,
                "column" : 3,
                "name" : "text_1",
                "row" : 1,
                "rowspan" : 5,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#FFFFFF",
                  "borderEdges" : [
                    "left"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 40,
                "column" : 10,
                "name" : "container_1",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_12",
                "row" : 7,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "#E6ECF2",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_11",
                "row" : 13,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 8,
                "column" : 1,
                "name" : "text_10",
                "row" : 14,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 7,
                "column" : 17,
                "name" : "text_15",
                "row" : 14,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 10,
                "column" : 38,
                "name" : "pillbox_1",
                "row" : 22,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgb(51, 87, 121)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 48,
                "column" : 1,
                "name" : "container_4",
                "row" : 21,
                "rowspan" : 47,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_2",
                "row" : 70,
                "rowspan" : 50,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(220, 228, 239)",
                  "borderColor" : "rgb(4, 29, 64)",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 48,
                "column" : 1,
                "name" : "text_2",
                "row" : 72,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 8,
                "column" : 22,
                "name" : "pillbox_2",
                "row" : 22,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgb(51, 87, 121)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_13",
                "row" : 120,
                "rowspan" : 44,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(255, 255, 255)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 9,
                "column" : 1,
                "name" : "text_40",
                "row" : 121,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 17,
                "column" : 1,
                "name" : "text_6",
                "row" : 124,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 10,
                "column" : 31,
                "name" : "text_7",
                "row" : 14,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 5,
                "column" : 17,
                "name" : "number_8",
                "row" : 16,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 8,
                "column" : 9,
                "name" : "text_12",
                "row" : 14,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 7,
                "column" : 24,
                "name" : "text_14",
                "row" : 14,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 8,
                "column" : 41,
                "name" : "text_16",
                "row" : 14,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 22,
                "column" : 2,
                "name" : "chart_9",
                "row" : 30,
                "rowspan" : 35,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 9,
                "column" : 15,
                "name" : "listselector_11",
                "row" : 26,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(51, 87, 121, 0.4)",
                  "borderColor" : "rgb(51, 87, 121)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 22,
                "column" : 26,
                "name" : "chart_1",
                "row" : 30,
                "rowspan" : 35,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 4,
                "column" : 11,
                "name" : "text_5",
                "row" : 26,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 9,
                "column" : 39,
                "name" : "listselector_12",
                "row" : 26,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(51, 87, 121, 0.4)",
                  "borderColor" : "rgb(51, 87, 121)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 6,
                "column" : 33,
                "name" : "text_4",
                "row" : 26,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 5,
                "column" : 24,
                "name" : "number_1",
                "row" : 16,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 48,
                "column" : 1,
                "name" : "chart_5",
                "row" : 75,
                "rowspan" : 21,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 48,
                "column" : 1,
                "name" : "chart_6",
                "row" : 96,
                "rowspan" : 21,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 5,
                "column" : 1,
                "name" : "number_2",
                "row" : 16,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 5,
                "column" : 9,
                "name" : "number_3",
                "row" : 16,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 5,
                "column" : 31,
                "name" : "number_5",
                "row" : 16,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 5,
                "column" : 41,
                "name" : "number_6",
                "row" : 16,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 9,
                "column" : 1,
                "name" : "listselector_1",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 9,
                "column" : 11,
                "name" : "listselector_2",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 9,
                "column" : 21,
                "name" : "listselector_3",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 8,
                "column" : 31,
                "name" : "listselector_4",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 14,
                "column" : 2,
                "name" : "text_3",
                "row" : 22,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 16,
                "column" : 32,
                "name" : "text_9",
                "row" : 117,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 21,
                "column" : 10,
                "name" : "navigation_1",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 48,
                "column" : 1,
                "name" : "table_2",
                "row" : 126,
                "rowspan" : 36,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 9,
                "column" : 40,
                "name" : "dateselector_3",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              }
            ]
          },
          {
            "label" : "History",
            "name" : "612ad44e-4bdf-49ec-8884-1a49eaede721",
            "navigationHidden" : false,
            "widgets" : [
              {
                "colspan" : 10,
                "column" : 0,
                "name" : "container_3",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 2,
                "column" : 1,
                "name" : "image_1",
                "row" : 1,
                "rowspan" : 5,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 7,
                "column" : 3,
                "name" : "text_1",
                "row" : 1,
                "rowspan" : 5,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#FFFFFF",
                  "borderEdges" : [
                    "left"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 40,
                "column" : 10,
                "name" : "container_1",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#7D98B3",
                  "borderEdges" : [
                    "bottom"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_12",
                "row" : 7,
                "rowspan" : 6,
                "widgetStyle" : {
                  "backgroundColor" : "#E6ECF2",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_11",
                "row" : 13,
                "rowspan" : 7,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 48,
                "column" : 1,
                "name" : "container_4",
                "row" : 21,
                "rowspan" : 47,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(17, 48, 91)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_2",
                "row" : 70,
                "rowspan" : 39,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(220, 228, 239)",
                  "borderColor" : "rgb(4, 29, 64)",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 8
                }
              },
              {
                "colspan" : 50,
                "column" : 0,
                "name" : "container_13",
                "row" : 109,
                "rowspan" : 44,
                "widgetStyle" : {
                  "backgroundColor" : "rgb(255, 255, 255)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 9,
                "column" : 1,
                "name" : "text_40",
                "row" : 110,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 17,
                "column" : 1,
                "name" : "text_6",
                "row" : 113,
                "rowspan" : 2,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 8,
                "column" : 13,
                "name" : "text_12",
                "row" : 14,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 5,
                "column" : 13,
                "name" : "number_3",
                "row" : 16,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 48,
                "column" : 1,
                "name" : "table_1",
                "row" : 115,
                "rowspan" : 36,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 6,
                "column" : 1,
                "name" : "listselector_1",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 6,
                "column" : 15,
                "name" : "listselector_2",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 6,
                "column" : 22,
                "name" : "listselector_3",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 6,
                "column" : 29,
                "name" : "listselector_4",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 21,
                "column" : 10,
                "name" : "navigation_1",
                "row" : 0,
                "rowspan" : 7,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 6,
                "column" : 36,
                "name" : "listselector_5",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 46,
                "column" : 2,
                "name" : "chart_3",
                "row" : 29,
                "rowspan" : 38,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 6,
                "column" : 43,
                "name" : "dateselector_3",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 8,
                "column" : 24,
                "name" : "pillbox_3",
                "row" : 22,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgb(51, 87, 121)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 11,
                "column" : 37,
                "name" : "pillbox_1",
                "row" : 22,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "rgba(255, 255, 255, 0)",
                  "borderColor" : "rgb(51, 87, 121)",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 0,
                  "borderWidth" : 2
                }
              },
              {
                "colspan" : 6,
                "column" : 8,
                "name" : "listselector_6",
                "row" : 8,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [
                    "all"
                  ],
                  "borderRadius" : 4,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 4,
                "column" : 1,
                "name" : "text_11",
                "row" : 14,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 6,
                "column" : 7,
                "name" : "text_13",
                "row" : 14,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 3,
                "column" : 1,
                "name" : "number_4",
                "row" : 16,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 5,
                "column" : 7,
                "name" : "number_7",
                "row" : 16,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 9,
                "column" : 21,
                "name" : "text_17",
                "row" : 14,
                "rowspan" : 2,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 9,
                "column" : 21,
                "name" : "number_9",
                "row" : 16,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 14,
                "column" : 2,
                "name" : "text_20",
                "row" : 26,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              },
              {
                "colspan" : 48,
                "column" : 1,
                "name" : "chart_2",
                "row" : 79,
                "rowspan" : 28,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 48,
                "column" : 1,
                "name" : "text_21",
                "row" : 72,
                "rowspan" : 4,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 48,
                "column" : 1,
                "name" : "text_22",
                "row" : 76,
                "rowspan" : 3,
                "widgetStyle" : {
                  "backgroundColor" : "#FFFFFF",
                  "borderColor" : "#E6ECF2",
                  "borderEdges" : [ ],
                  "borderRadius" : 0,
                  "borderWidth" : 1
                }
              },
              {
                "colspan" : 19,
                "column" : 2,
                "name" : "text_8",
                "row" : 22,
                "rowspan" : 3,
                "widgetStyle" : {
                  "borderEdges" : [ ]
                }
              }
            ]
          }
        ],
        "rowHeight" : "fine",
        "selectors" : [ ],
        "style" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "backgroundColor" : "rgb(4, 29, 64)",
          "cellSpacingX" : 0,
          "cellSpacingY" : 0,
          "fit" : "original",
          "gutterColor" : "#C5D3E0"
        },
        "version" : 1.0
      }
    ],
    "layouts" : [ ],
    "steps" : {
      "MAPE_KPI_6" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "MAPE KPI",
        "numbers" : [ ],
        "query" : "forecasts = load \"${App.Datasets.MFG_Demo_Data.FullyQualifiedName}\";\n forecasts = filter forecasts by 'PeriodStartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\n forecasts = filter forecasts by 'PeriodEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\n forecasts = foreach forecasts generate  {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'AccountProductPeriodForecastId' as 'Id', 'PeriodStartDate_sec_epoch' as 'StartDate_sec_epoch', 'PeriodEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount', 'Forecast' as 'ForecastedRevenue', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedQuantity' as 'ForecastedQuantity';\n Start = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month',                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Amount'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantity' else 'ForecastedQuantityFinal' end as 'Quantity'                ,                   case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyRevenueBAdj' else 'ForecastedRevenue' end as 'Amount_before_adj'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantityBAdj' else 'ForecastedQuantity' end as 'Quantity_before_adj'                , 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\n End_Value = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyAmount' \n    else 0 end as 'Amount', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantity' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantity' \n    else 0 end as 'Quantity', case     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyRevenueBAdj'     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyRevenueBAdj'     else 0 end as 'Amount_before_adj', case     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantityBAdj'    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantityBAdj'     else 0 end as 'Quantity_before_adj', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\n DataForFill = union Start, End_Value;\n  DataForFill = foreach DataForFill generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','Amount' as 'Amount', 'Quantity' as 'Quantity','Amount_before_adj' as 'Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\n FilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\n FilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Amount') as 'Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', sum('Quantity') as 'Quantity', min(first('ForecastedDailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantity', sum('Amount_before_adj') as 'Amount_before_adj', min(first('ForecastedDailyRevenueBAdj'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyRevenueBAdj', sum('Quantity_before_adj') as 'Quantity_before_adj', min(first('ForecastedDailyQuantityBAdj'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantityBAdj';\n FilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', case when 'Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Amount' end as 'Amount', case when 'Quantity' is null then month_days(toDate('Date'))*'ForecastedDailyQuantity' else 'Quantity' end as 'Quantity', case when 'Amount_before_adj' is null then month_days(toDate('Date'))*'ForecastedDailyRevenueBAdj' else 'Amount_before_adj' end as 'Amount_before_adj', case when 'Quantity_before_adj' is null then month_days(toDate('Date'))*'ForecastedDailyQuantityBAdj' else 'Quantity_before_adj' end as 'Quantity_before_adj';\n forecasts_results = group FilledData by ('Date_Year', 'Date_Month');\n forecasts_results = foreach forecasts_results generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', \"01\" as 'StartDate_Day', 'Date_Month' as 'StartDate_Month', sum('Amount') as 'Amount', sum('Quantity') as 'Quantity', sum('Amount_before_adj') as 'Amount_before_adj', sum('Quantity_before_adj') as 'Quantity_before_adj';\n forecasts_results = foreach forecasts_results generate 'StartDate_Year' + \"~~~\" + 'StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'StartDate_Year' as 'StartDate_Year', 'StartDate_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', 'Amount' as 'Amount', 'Quantity' as 'Quantity', 'Amount_before_adj' as 'Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj';\n forecast_results = filter forecasts_results by {{row(Date_Filter_1.result, [0], [\"Min\",\"Max\"]).asDateRange(\"date('StartDate_Year','StartDate_Month','StartDate_Day')\")}};\n forecast_results = group forecast_results by 'StartDate_Year~~~StartDate_Month';\n forecast_results = foreach forecast_results generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', first('StartDate_Year') as 'StartDate_Year', first('StartDate_Month') as 'StartDate_Month', sum('Amount') as 'Amount', sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity', sum('Amount_before_adj') as 'Amount_before_adj', sum(sum('Amount_before_adj')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount_before_adj', sum('Quantity_before_adj') as 'Quantity_before_adj', sum(sum('Quantity_before_adj')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity_before_adj';\n forecast_results = foreach forecast_results generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'Amount' as 'Amount', 'cumm_Amount' as 'cumm_Amount', 'Quantity' as 'Quantity', 'cumm_Quantity' as 'cumm_Quantity', 'Amount_before_adj' as 'Amount_before_adj', 'cumm_Amount_before_adj' as 'cumm_Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj', 'cumm_Quantity_before_adj' as 'cumm_Quantity_before_adj';\n forecast_results = order forecast_results by 'StartDate_Year~~~StartDate_Month' asc;\n\n  orders = load \"${App.Datasets.MFG_Order_Product.FullyQualifiedName}\";\n orders = filter orders by 'OrderEffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\n orders = filter orders by 'OrderEffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\n orders = group orders by ('OrderEffectiveDate_Year', 'OrderEffectiveDate_Month');\n order_results = foreach orders generate 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('TotalPrice') as 'Amount', sum(sum('TotalPrice')) over ([..0] partition by all order by 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' asc) as 'cumm_Quantity';\n order_results = order order_results by 'StartDate_Year~~~StartDate_Month' asc;\n\n  result = cogroup order_results by 'StartDate_Year~~~StartDate_Month' full, forecast_results by 'StartDate_Year~~~StartDate_Month';\n result = foreach result generate coalesce(forecast_results.'StartDate_Year~~~StartDate_Month', order_results.'StartDate_Year~~~StartDate_Month') as 'StartDate_Year~~~StartDate_Month', coalesce(sum(order_results.'Amount'),0) as 'Actuals', coalesce(sum(forecast_results.'Amount'),0) as 'Forecast', coalesce(sum(order_results.'Quantity'),0) as 'ActualQuantity', coalesce(sum(forecast_results.'Quantity'),0) as 'ForecastQuantity', coalesce(sum(forecast_results.'Amount_before_adj'),0) as 'Forecast_before_adj', coalesce(sum(forecast_results.'Quantity_before_adj'),0) as 'ForecastQuantity_before_adj';\n  result = group result by 'StartDate_Year~~~StartDate_Month';\n result = foreach result generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('Actuals') as 'Actuals', sum('Forecast') as 'Forecast', sum('Forecast_before_adj') as 'Forecast_before_adj', (case when sum('Actuals')==0 then null else abs(sum('Actuals')-sum('Forecast'))/sum('Actuals') end) as 'amount_mape', (case when sum('Actuals')==0 then null else abs(sum('Actuals')-sum('Forecast_before_adj'))/sum('Actuals') end) as 'amount_mape_before_adj', (case when sum('Actuals')==0 then 0 else 1 end) as 'amount_mape_eligibile', (case when sum('ActualQuantity')==0 then null else abs(sum('ActualQuantity')-sum('ForecastQuantity'))/sum('ActualQuantity') end) as 'quantity_mape', (case when sum('ActualQuantity')==0 then null else abs(sum('ActualQuantity')-sum('ForecastQuantity_before_adj'))/sum('ActualQuantity') end) as 'quantity_mape_before_adj', (case when sum('ActualQuantity')==0 then 0 else 1 end) as 'quantity_mape_eligibile';\n result = group result by all;\n result = foreach result generate sum('Actuals')-sum('Forecast_before_adj') as 'ForecastAmountGap_before_adj', sum('Actuals')-sum('Forecast') as 'ForecastAmountGap';\n ",
        "receiveFacetSource" : {
          "mode" : "all",
          "steps" : [ ]
        },
        "selectMode" : "none",
        "start" : [ ],
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : false,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "stack" : false,
            "showPoints" : true,
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "bottom-center",
              "inside" : false
            },
            "axisMode" : "sync",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "time-combo",
            "missingValue" : "connect",
            "showValuesOnLine" : false,
            "timeAxis" : {
              "showTitle" : true,
              "showAxis" : true,
              "referenceLines" : [ ],
              "title" : "Time (Year>Month)"
            },
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "left",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "plots" : {
              "cumm_Amount" : {
                "mark" : "line"
              },
              "cumm_Amount_low_95" : {
                "mark" : "line"
              },
              "Amount" : {
                "mark" : "bar"
              },
              "cumm_Planned_Revenue" : {
                "mark" : "line"
              },
              "cumm_Amount_high_95" : {
                "mark" : "line"
              }
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "Amount",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "MAPE_KPI_5" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "MAPE KPI",
        "numbers" : [ ],
        "query" : "forecasts = load \"${App.Datasets.MFG_Demo_Data.FullyQualifiedName}\";\n forecasts = filter forecasts by 'PeriodStartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\n forecasts = filter forecasts by 'PeriodEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\n forecasts = foreach forecasts generate  {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'AccountProductPeriodForecastId' as 'Id', 'PeriodStartDate_sec_epoch' as 'StartDate_sec_epoch', 'PeriodEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount', 'Forecast' as 'ForecastedRevenue', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedQuantity' as 'ForecastedQuantity';\n Start = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month',                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Amount'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantity' else 'ForecastedQuantityFinal' end as 'Quantity'                ,                   case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyRevenueBAdj' else 'ForecastedRevenue' end as 'Amount_before_adj'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantityBAdj' else 'ForecastedQuantity' end as 'Quantity_before_adj'                , 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\n End_Value = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyAmount' \n    else 0 end as 'Amount', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantity' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantity' \n    else 0 end as 'Quantity', case     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyRevenueBAdj'     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyRevenueBAdj'     else 0 end as 'Amount_before_adj', case     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantityBAdj'    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantityBAdj'     else 0 end as 'Quantity_before_adj', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\n DataForFill = union Start, End_Value;\n  DataForFill = foreach DataForFill generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','Amount' as 'Amount', 'Quantity' as 'Quantity','Amount_before_adj' as 'Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\n FilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\n FilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Amount') as 'Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', sum('Quantity') as 'Quantity', min(first('ForecastedDailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantity', sum('Amount_before_adj') as 'Amount_before_adj', min(first('ForecastedDailyRevenueBAdj'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyRevenueBAdj', sum('Quantity_before_adj') as 'Quantity_before_adj', min(first('ForecastedDailyQuantityBAdj'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantityBAdj';\n FilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', case when 'Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Amount' end as 'Amount', case when 'Quantity' is null then month_days(toDate('Date'))*'ForecastedDailyQuantity' else 'Quantity' end as 'Quantity', case when 'Amount_before_adj' is null then month_days(toDate('Date'))*'ForecastedDailyRevenueBAdj' else 'Amount_before_adj' end as 'Amount_before_adj', case when 'Quantity_before_adj' is null then month_days(toDate('Date'))*'ForecastedDailyQuantityBAdj' else 'Quantity_before_adj' end as 'Quantity_before_adj';\n forecasts_results = group FilledData by ('Date_Year', 'Date_Month');\n forecasts_results = foreach forecasts_results generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', \"01\" as 'StartDate_Day', 'Date_Month' as 'StartDate_Month', sum('Amount') as 'Amount', sum('Quantity') as 'Quantity', sum('Amount_before_adj') as 'Amount_before_adj', sum('Quantity_before_adj') as 'Quantity_before_adj';\n forecasts_results = foreach forecasts_results generate 'StartDate_Year' + \"~~~\" + 'StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'StartDate_Year' as 'StartDate_Year', 'StartDate_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', 'Amount' as 'Amount', 'Quantity' as 'Quantity', 'Amount_before_adj' as 'Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj';\n forecast_results = filter forecasts_results by {{row(Date_Filter_1.result, [0], [\"Min\",\"Max\"]).asDateRange(\"date('StartDate_Year','StartDate_Month','StartDate_Day')\")}};\n forecast_results = group forecast_results by 'StartDate_Year~~~StartDate_Month';\n forecast_results = foreach forecast_results generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', first('StartDate_Year') as 'StartDate_Year', first('StartDate_Month') as 'StartDate_Month', sum('Amount') as 'Amount', sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity', sum('Amount_before_adj') as 'Amount_before_adj', sum(sum('Amount_before_adj')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount_before_adj', sum('Quantity_before_adj') as 'Quantity_before_adj', sum(sum('Quantity_before_adj')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity_before_adj';\n forecast_results = foreach forecast_results generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'Amount' as 'Amount', 'cumm_Amount' as 'cumm_Amount', 'Quantity' as 'Quantity', 'cumm_Quantity' as 'cumm_Quantity', 'Amount_before_adj' as 'Amount_before_adj', 'cumm_Amount_before_adj' as 'cumm_Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj', 'cumm_Quantity_before_adj' as 'cumm_Quantity_before_adj';\n forecast_results = order forecast_results by 'StartDate_Year~~~StartDate_Month' asc;\n\n  orders = load \"${App.Datasets.MFG_Order_Product.FullyQualifiedName}\";\n orders = filter orders by 'OrderEffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\n orders = filter orders by 'OrderEffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\n orders = group orders by ('OrderEffectiveDate_Year', 'OrderEffectiveDate_Month');\n order_results = foreach orders generate 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('TotalPrice') as 'Amount', sum(sum('TotalPrice')) over ([..0] partition by all order by 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' asc) as 'cumm_Quantity';\n order_results = order order_results by 'StartDate_Year~~~StartDate_Month' asc;\n\n  result = cogroup order_results by 'StartDate_Year~~~StartDate_Month' full, forecast_results by 'StartDate_Year~~~StartDate_Month';\n result = foreach result generate coalesce(forecast_results.'StartDate_Year~~~StartDate_Month', order_results.'StartDate_Year~~~StartDate_Month') as 'StartDate_Year~~~StartDate_Month', coalesce(sum(order_results.'Amount'),0) as 'Actuals', coalesce(sum(forecast_results.'Amount'),0) as 'Forecast', coalesce(sum(order_results.'Quantity'),0) as 'ActualQuantity', coalesce(sum(forecast_results.'Quantity'),0) as 'ForecastQuantity', coalesce(sum(forecast_results.'Amount_before_adj'),0) as 'Forecast_before_adj', coalesce(sum(forecast_results.'Quantity_before_adj'),0) as 'ForecastQuantity_before_adj';\n  result = group result by 'StartDate_Year~~~StartDate_Month';\n result = foreach result generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('Actuals') as 'Actuals', sum('Forecast') as 'Forecast', sum('Forecast_before_adj') as 'Forecast_before_adj', (case when sum('Actuals')==0 then null else abs(sum('Actuals')-sum('Forecast'))/sum('Actuals') end) as 'amount_mape', (case when sum('Actuals')==0 then null else abs(sum('Actuals')-sum('Forecast_before_adj'))/sum('Actuals') end) as 'amount_mape_before_adj', (case when sum('Actuals')==0 then 0 else 1 end) as 'amount_mape_eligibile', (case when sum('ActualQuantity')==0 then null else abs(sum('ActualQuantity')-sum('ForecastQuantity'))/sum('ActualQuantity') end) as 'quantity_mape', (case when sum('ActualQuantity')==0 then null else abs(sum('ActualQuantity')-sum('ForecastQuantity_before_adj'))/sum('ActualQuantity') end) as 'quantity_mape_before_adj', (case when sum('ActualQuantity')==0 then 0 else 1 end) as 'quantity_mape_eligibile';\n result = group result by all;\n result = foreach result generate sum('Actuals')-sum('Forecast_before_adj') as 'ForecastAmountGap_before_adj', sum('Actuals')-sum('Forecast') as 'ForecastAmountGap';\n ",
        "receiveFacetSource" : {
          "mode" : "all",
          "steps" : [ ]
        },
        "selectMode" : "none",
        "start" : [ ],
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : false,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "stack" : false,
            "showPoints" : true,
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "bottom-center",
              "inside" : false
            },
            "axisMode" : "sync",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "time-combo",
            "missingValue" : "connect",
            "showValuesOnLine" : false,
            "timeAxis" : {
              "showTitle" : true,
              "showAxis" : true,
              "referenceLines" : [ ],
              "title" : "Time (Year>Month)"
            },
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "left",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "plots" : {
              "cumm_Amount" : {
                "mark" : "line"
              },
              "cumm_Amount_low_95" : {
                "mark" : "line"
              },
              "Amount" : {
                "mark" : "bar"
              },
              "cumm_Planned_Revenue" : {
                "mark" : "line"
              },
              "cumm_Amount_high_95" : {
                "mark" : "line"
              }
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "Amount",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Forecast_Change_by_P_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Forecast Change by Products",
        "numbers" : [ ],
        "query" : "all_slaps_forecast = load \"${App.Datasets.MFG_Demo_Data.FullyQualifiedName}\";\nall_slaps_forecast = filter all_slaps_forecast by 'PeriodStartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'PeriodEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_forecast = foreach all_slaps_forecast generate 'IdValidFromToKey' as 'IdValidFromToKey', 'ProductName' as 'AccountProductForecast.Name', 'ProductFamily' as 'Product.Family', 'PeriodStartDate_sec_epoch' as 'StartDate_sec_epoch', 'PeriodEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ValidFrom_sec_epoch' as 'ValidFrom_sec_epoch', 'ValidTo_sec_epoch' as 'ValidTo_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 0 as 'DiscountPercentage', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount';\nStart = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'IdValidFromToKey' as 'IdValidFromToKey', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nEnd_Value_Forecasted = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'IdValidFromToKey' as 'IdValidFromToKey', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'ForecastedDailyAmount' else 0 end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nDataForFill_Forecasted = union Start, End_Value_Forecasted;\nDataForFill_Forecasted = foreach DataForFill_Forecasted generate 'IdValidFromToKey' as 'IdValidFromToKey', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Forecasted Amount' as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_Forecasted = fill DataForFill_Forecasted by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='IdValidFromToKey');\nFilledData_Forecasted = group FilledData_Forecasted by ('IdValidFromToKey', 'Date_Year', 'Date_Month');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'IdValidFromToKey', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'IdValidFromToKey' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'IdValidFromToKey' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'IdValidFromToKey' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'IdValidFromToKey' ) as 'End Date', sum('Forecasted Amount') as 'Forecasted Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'IdValidFromToKey' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'IdValidFromToKey' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_Forecasted = filter FilledData_Forecasted by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData = foreach FilledData_Forecasted generate 'IdValidFromToKey', 'Date_Year', 'Date_Month', 'SalesPrice' as 'SalesPrice', (case when 'Forecasted Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Forecasted Amount' end) as 'Forecasted Amount';\nFilledData = foreach FilledData generate 'IdValidFromToKey', 'Date_Year', 'Date_Month', 'SalesPrice' as 'SalesPrice', 'Forecasted Amount' as 'Forecasted Amount', case when 'SalesPrice' is null then 0 else 'Forecasted Amount'/'SalesPrice' end as 'Forecasted Quantity';\nFilledData = foreach FilledData generate 'IdValidFromToKey', 'Date_Year', 'Date_Month', 'Forecasted Amount' as 'Forecasted Amount', case when 'SalesPrice' is null then 0 else 'Forecasted Amount'/'SalesPrice' end as 'Forecasted Quantity';\nresult = group FilledData by 'IdValidFromToKey' left, all_slaps_forecast by 'IdValidFromToKey';\nresult = foreach result generate  FilledData.'IdValidFromToKey' as 'IdValidFromToKey', first(all_slaps_forecast.'AccountProductForecast.Name') as 'ProductName', first(all_slaps_forecast.'Product.Family') as 'ProductFamily',\n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Cur_Max_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Cur_Max_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Cur_Max_ForecastedMeasure', \n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Cur_Min_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Cur_Min_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Cur_Min_ForecastedMeasure', \n case when {{coalesce(cell(Min_and_max_dates_1.result,0,cell(static_1.selection, 0, \"Min_Date\")),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,cell(static_1.selection, 0, \"Min_Date\")),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Cum_Cur_Min_ForecastedMeasure',\n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"First_Max_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"First_Max_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'First_Max_ForecastedMeasure', \n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"First_Min_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"First_Min_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'First_Min_ForecastedMeasure',\n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Second_Max_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Second_Max_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Second_Max_ForecastedMeasure', \n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Second_Min_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Second_Min_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Second_Min_ForecastedMeasure',\n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Third_Max_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Third_Max_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Third_Max_ForecastedMeasure', \n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Third_Min_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Third_Min_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Third_Min_ForecastedMeasure',\n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Fourth_Max_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Fourth_Max_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Fourth_Max_ForecastedMeasure', \n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Fourth_Min_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Fourth_Min_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Fourth_Min_ForecastedMeasure',\n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Fifth_Max_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Fifth_Max_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Fifth_Max_ForecastedMeasure', \n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Fifth_Min_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Fifth_Min_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Fifth_Min_ForecastedMeasure',\n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Sixth_Max_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Sixth_Max_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Sixth_Max_ForecastedMeasure', \n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Sixth_Min_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Sixth_Min_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Sixth_Min_ForecastedMeasure',\n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Seventh_Max_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Seventh_Max_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Seventh_Max_ForecastedMeasure', \n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Seventh_Min_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Seventh_Min_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Seventh_Min_ForecastedMeasure',\n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Eighth_Max_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Eighth_Max_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Eighth_Max_ForecastedMeasure', \n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Eighth_Min_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Eighth_Min_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Eighth_Min_ForecastedMeasure',\n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Ninth_Max_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Ninth_Max_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Ninth_Max_ForecastedMeasure', \n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Ninth_Min_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Ninth_Min_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Ninth_Min_ForecastedMeasure',\n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Tenth_Max_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Tenth_Max_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Tenth_Max_ForecastedMeasure', \n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Tenth_Min_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Tenth_Min_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Tenth_Min_ForecastedMeasure',\n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Eleventh_Max_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Eleventh_Max_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Eleventh_Max_ForecastedMeasure', \n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Eleventh_Min_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Eleventh_Min_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Eleventh_Min_ForecastedMeasure',\n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Twelfth_Max_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Twelfth_Max_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Twelfth_Max_ForecastedMeasure', \n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Twelfth_Min_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Twelfth_Min_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Twelfth_Min_ForecastedMeasure';\nresult = group result by '{{column(Prod_vs_Prod_Family_1.selection, [\"forecasts_col\"]).asObject()}}';\nresult = foreach result generate '{{column(Prod_vs_Prod_Family_1.selection, [\"forecasts_col\"]).asObject()}}' as '{{column(Prod_vs_Prod_Family_1.selection, [\"forecasts_col\"]).asObject()}}', \n(sum(Cur_Max_ForecastedMeasure) - sum(Cum_Cur_Min_ForecastedMeasure))/sum(Cum_Cur_Min_ForecastedMeasure) as {{cell(Min_and_max_dates_1.result, 0, \"Cumulative_Cur_Month_Percent_Name\").asString()}},(sum(Cur_Max_ForecastedMeasure) - sum(Cur_Min_ForecastedMeasure))/sum(Cur_Min_ForecastedMeasure) as {{cell(Min_and_max_dates_1.result, 0, \"Cur_Month_Percent_Name\").asString()}},(sum(First_Max_ForecastedMeasure) - sum(First_Min_ForecastedMeasure))/sum(First_Min_ForecastedMeasure) as {{cell(Min_and_max_dates_1.result, 0, \"First_Month_Percent_Name\").asString()}},(sum(Second_Max_ForecastedMeasure) - sum(Second_Min_ForecastedMeasure))/sum(Second_Min_ForecastedMeasure) as {{cell(Min_and_max_dates_1.result, 0, \"Second_Month_Percent_Name\").asString()}},(sum(Third_Max_ForecastedMeasure) - sum(Third_Min_ForecastedMeasure))/sum(Third_Min_ForecastedMeasure) as {{cell(Min_and_max_dates_1.result, 0, \"Third_Month_Percent_Name\").asString()}},(sum(Fourth_Max_ForecastedMeasure) - sum(Fourth_Min_ForecastedMeasure))/sum(Fourth_Min_ForecastedMeasure) as {{cell(Min_and_max_dates_1.result, 0, \"Fourth_Month_Percent_Name\").asString()}},(sum(Fifth_Max_ForecastedMeasure) - sum(Fifth_Min_ForecastedMeasure))/sum(Fifth_Min_ForecastedMeasure) as {{cell(Min_and_max_dates_1.result, 0, \"Fifth_Month_Percent_Name\").asString()}},(sum(Sixth_Max_ForecastedMeasure) - sum(Sixth_Min_ForecastedMeasure))/sum(Sixth_Min_ForecastedMeasure) as {{cell(Min_and_max_dates_1.result, 0, \"Sixth_Month_Percent_Name\").asString()}},(sum(Seventh_Max_ForecastedMeasure) - sum(Seventh_Min_ForecastedMeasure))/sum(Seventh_Min_ForecastedMeasure) as {{cell(Min_and_max_dates_1.result, 0, \"Seventh_Month_Percent_Name\").asString()}},(sum(Eighth_Max_ForecastedMeasure) - sum(Eighth_Min_ForecastedMeasure))/sum(Eighth_Min_ForecastedMeasure) as {{cell(Min_and_max_dates_1.result, 0, \"Eighth_Month_Percent_Name\").asString()}},(sum(Ninth_Max_ForecastedMeasure) - sum(Ninth_Min_ForecastedMeasure))/sum(Ninth_Min_ForecastedMeasure) as {{cell(Min_and_max_dates_1.result, 0, \"Ninth_Month_Percent_Name\").asString()}},(sum(Tenth_Max_ForecastedMeasure) - sum(Tenth_Min_ForecastedMeasure))/sum(Tenth_Min_ForecastedMeasure) as {{cell(Min_and_max_dates_1.result, 0, \"Tenth_Month_Percent_Name\").asString()}},(sum(Eleventh_Max_ForecastedMeasure) - sum(Eleventh_Min_ForecastedMeasure))/sum(Eleventh_Min_ForecastedMeasure) as {{cell(Min_and_max_dates_1.result, 0, \"Eleventh_Month_Percent_Name\").asString()}},(sum(Twelfth_Max_ForecastedMeasure) - sum(Twelfth_Min_ForecastedMeasure))/sum(Twelfth_Min_ForecastedMeasure) as {{cell(Min_and_max_dates_1.result, 0, \"Twelfth_Month_Percent_Name\").asString()}};\nresult  = foreach result generate '{{column(Prod_vs_Prod_Family_1.selection, [\"forecasts_col\"]).asObject()}}' as '{{column(Prod_vs_Prod_Family_1.selection, [\"forecasts_col\"]).asObject()}}', {{cell(Min_and_max_dates_1.result, 0, \"Percent_Measure_Names\").asString()}};\nresult = order result by ({{cell(Min_and_max_dates_1.result, 0, \"Order_By_Percent_Measure_Names\").asString()}});",
        "receiveFacetSource" : {
          "mode" : "all",
          "steps" : [ ]
        },
        "selectMode" : "single",
        "start" : [ ],
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "MAPE_KPI_2" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "MAPE KPI",
        "numbers" : [ ],
        "query" : "forecasts = load \"${App.Datasets.MFG_Demo_Data.FullyQualifiedName}\";\n forecasts = filter forecasts by 'PeriodStartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\n forecasts = filter forecasts by 'PeriodEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\n forecasts = foreach forecasts generate  {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'AccountProductPeriodForecastId' as 'Id', 'PeriodStartDate_sec_epoch' as 'StartDate_sec_epoch', 'PeriodEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount', 'Forecast' as 'ForecastedRevenue', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedQuantity' as 'ForecastedQuantity';\n Start = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month',                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Amount'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantity' else 'ForecastedQuantityFinal' end as 'Quantity'                ,                   case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyRevenueBAdj' else 'ForecastedRevenue' end as 'Amount_before_adj'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantityBAdj' else 'ForecastedQuantity' end as 'Quantity_before_adj'                , 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\n End_Value = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyAmount' \n    else 0 end as 'Amount', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantity' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantity' \n    else 0 end as 'Quantity', case     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyRevenueBAdj'     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyRevenueBAdj'     else 0 end as 'Amount_before_adj', case     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantityBAdj'    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantityBAdj'     else 0 end as 'Quantity_before_adj', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\n DataForFill = union Start, End_Value;\n  DataForFill = foreach DataForFill generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','Amount' as 'Amount', 'Quantity' as 'Quantity','Amount_before_adj' as 'Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\n FilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\n FilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Amount') as 'Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', sum('Quantity') as 'Quantity', min(first('ForecastedDailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantity', sum('Amount_before_adj') as 'Amount_before_adj', min(first('ForecastedDailyRevenueBAdj'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyRevenueBAdj', sum('Quantity_before_adj') as 'Quantity_before_adj', min(first('ForecastedDailyQuantityBAdj'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantityBAdj';\n FilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', case when 'Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Amount' end as 'Amount', case when 'Quantity' is null then month_days(toDate('Date'))*'ForecastedDailyQuantity' else 'Quantity' end as 'Quantity', case when 'Amount_before_adj' is null then month_days(toDate('Date'))*'ForecastedDailyRevenueBAdj' else 'Amount_before_adj' end as 'Amount_before_adj', case when 'Quantity_before_adj' is null then month_days(toDate('Date'))*'ForecastedDailyQuantityBAdj' else 'Quantity_before_adj' end as 'Quantity_before_adj';\n forecasts_results = group FilledData by ('Date_Year', 'Date_Month');\n forecasts_results = foreach forecasts_results generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', \"01\" as 'StartDate_Day', 'Date_Month' as 'StartDate_Month', sum('Amount') as 'Amount', sum('Quantity') as 'Quantity', sum('Amount_before_adj') as 'Amount_before_adj', sum('Quantity_before_adj') as 'Quantity_before_adj';\n forecasts_results = foreach forecasts_results generate 'StartDate_Year' + \"~~~\" + 'StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'StartDate_Year' as 'StartDate_Year', 'StartDate_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', 'Amount' as 'Amount', 'Quantity' as 'Quantity', 'Amount_before_adj' as 'Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj';\n forecast_results = filter forecasts_results by {{row(Date_Filter_1.result, [0], [\"Min\",\"Max\"]).asDateRange(\"date('StartDate_Year','StartDate_Month','StartDate_Day')\")}};\n forecast_results = group forecast_results by 'StartDate_Year~~~StartDate_Month';\n forecast_results = foreach forecast_results generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', first('StartDate_Year') as 'StartDate_Year', first('StartDate_Month') as 'StartDate_Month', sum('Amount') as 'Amount', sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity', sum('Amount_before_adj') as 'Amount_before_adj', sum(sum('Amount_before_adj')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount_before_adj', sum('Quantity_before_adj') as 'Quantity_before_adj', sum(sum('Quantity_before_adj')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity_before_adj';\n forecast_results = foreach forecast_results generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'Amount' as 'Amount', 'cumm_Amount' as 'cumm_Amount', 'Quantity' as 'Quantity', 'cumm_Quantity' as 'cumm_Quantity', 'Amount_before_adj' as 'Amount_before_adj', 'cumm_Amount_before_adj' as 'cumm_Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj', 'cumm_Quantity_before_adj' as 'cumm_Quantity_before_adj';\n forecast_results = order forecast_results by 'StartDate_Year~~~StartDate_Month' asc;\n\n  orders = load \"${App.Datasets.MFG_Order_Product.FullyQualifiedName}\";\n orders = filter orders by 'OrderEffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\n orders = filter orders by 'OrderEffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\n orders = group orders by ('OrderEffectiveDate_Year', 'OrderEffectiveDate_Month');\n order_results = foreach orders generate 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('TotalPrice') as 'Amount', sum(sum('TotalPrice')) over ([..0] partition by all order by 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' asc) as 'cumm_Quantity';\n order_results = order order_results by 'StartDate_Year~~~StartDate_Month' asc;\n\n  result = cogroup order_results by 'StartDate_Year~~~StartDate_Month' full, forecast_results by 'StartDate_Year~~~StartDate_Month';\n result = foreach result generate coalesce(forecast_results.'StartDate_Year~~~StartDate_Month', order_results.'StartDate_Year~~~StartDate_Month') as 'StartDate_Year~~~StartDate_Month', coalesce(sum(order_results.'Amount'),0) as 'Actuals', coalesce(sum(forecast_results.'Amount'),0) as 'Forecast', coalesce(sum(order_results.'Quantity'),0) as 'ActualQuantity', coalesce(sum(forecast_results.'Quantity'),0) as 'ForecastQuantity', coalesce(sum(forecast_results.'Amount_before_adj'),0) as 'Forecast_before_adj', coalesce(sum(forecast_results.'Quantity_before_adj'),0) as 'ForecastQuantity_before_adj';\n  result = group result by 'StartDate_Year~~~StartDate_Month';\n result = foreach result generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('Actuals') as 'Actuals', sum('Forecast') as 'Forecast', (case when sum('Actuals')==0 then null else abs(sum('Actuals')-sum('Forecast'))/sum('Actuals') end) as 'amount_mape', (case when sum('Actuals')==0 then null else abs(sum('Actuals')-sum('Forecast_before_adj'))/sum('Actuals') end) as 'amount_mape_before_adj', (case when sum('Actuals')==0 then 0 else 1 end) as 'amount_mape_eligibile', (case when sum('ActualQuantity')==0 then null else abs(sum('ActualQuantity')-sum('ForecastQuantity'))/sum('ActualQuantity') end) as 'quantity_mape', (case when sum('ActualQuantity')==0 then null else abs(sum('ActualQuantity')-sum('ForecastQuantity_before_adj'))/sum('ActualQuantity') end) as 'quantity_mape_before_adj', (case when sum('ActualQuantity')==0 then 0 else 1 end) as 'quantity_mape_eligibile';\n result = group result by all;\n result = foreach result generate sum('amount_mape_before_adj')*100/sum('amount_mape_eligibile') as 'amount_mape_before_adj', sum('quantity_mape_before_adj')*100/sum('quantity_mape_eligibile') as 'quantity_mape_before_adj';\n ",
        "receiveFacetSource" : {
          "mode" : "all",
          "steps" : [ ]
        },
        "selectMode" : "none",
        "start" : [ ],
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : false,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "stack" : false,
            "showPoints" : true,
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "bottom-center",
              "inside" : false
            },
            "axisMode" : "sync",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "time-combo",
            "missingValue" : "connect",
            "showValuesOnLine" : false,
            "timeAxis" : {
              "showTitle" : true,
              "showAxis" : true,
              "referenceLines" : [ ],
              "title" : "Time (Year>Month)"
            },
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "left",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "plots" : {
              "cumm_Amount" : {
                "mark" : "line"
              },
              "cumm_Amount_low_95" : {
                "mark" : "line"
              },
              "Amount" : {
                "mark" : "bar"
              },
              "cumm_Planned_Revenue" : {
                "mark" : "line"
              },
              "cumm_Amount_high_95" : {
                "mark" : "line"
              }
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "Amount",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "MAPE_KPI_4" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "MAPE KPI",
        "numbers" : [ ],
        "query" : "forecasts = load \"${App.Datasets.MFG_Demo_Data.FullyQualifiedName}\";\n forecasts = filter forecasts by 'PeriodStartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\n forecasts = filter forecasts by 'PeriodEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\n forecasts = foreach forecasts generate  {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'AccountProductPeriodForecastId' as 'Id', 'PeriodStartDate_sec_epoch' as 'StartDate_sec_epoch', 'PeriodEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount', 'Forecast' as 'ForecastedRevenue', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedQuantity' as 'ForecastedQuantity';\n Start = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month',                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Amount'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantity' else 'ForecastedQuantityFinal' end as 'Quantity'                ,                   case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyRevenueBAdj' else 'ForecastedRevenue' end as 'Amount_before_adj'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantityBAdj' else 'ForecastedQuantity' end as 'Quantity_before_adj'                , 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\n End_Value = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyAmount' \n    else 0 end as 'Amount', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantity' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantity' \n    else 0 end as 'Quantity', case     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyRevenueBAdj'     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyRevenueBAdj'     else 0 end as 'Amount_before_adj', case     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantityBAdj'    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantityBAdj'     else 0 end as 'Quantity_before_adj', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\n DataForFill = union Start, End_Value;\n  DataForFill = foreach DataForFill generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','Amount' as 'Amount', 'Quantity' as 'Quantity','Amount_before_adj' as 'Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\n FilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\n FilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Amount') as 'Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', sum('Quantity') as 'Quantity', min(first('ForecastedDailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantity', sum('Amount_before_adj') as 'Amount_before_adj', min(first('ForecastedDailyRevenueBAdj'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyRevenueBAdj', sum('Quantity_before_adj') as 'Quantity_before_adj', min(first('ForecastedDailyQuantityBAdj'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantityBAdj';\n FilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', case when 'Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Amount' end as 'Amount', case when 'Quantity' is null then month_days(toDate('Date'))*'ForecastedDailyQuantity' else 'Quantity' end as 'Quantity', case when 'Amount_before_adj' is null then month_days(toDate('Date'))*'ForecastedDailyRevenueBAdj' else 'Amount_before_adj' end as 'Amount_before_adj', case when 'Quantity_before_adj' is null then month_days(toDate('Date'))*'ForecastedDailyQuantityBAdj' else 'Quantity_before_adj' end as 'Quantity_before_adj';\n forecasts_results = group FilledData by ('Date_Year', 'Date_Month');\n forecasts_results = foreach forecasts_results generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', \"01\" as 'StartDate_Day', 'Date_Month' as 'StartDate_Month', sum('Amount') as 'Amount', sum('Quantity') as 'Quantity', sum('Amount_before_adj') as 'Amount_before_adj', sum('Quantity_before_adj') as 'Quantity_before_adj';\n forecasts_results = foreach forecasts_results generate 'StartDate_Year' + \"~~~\" + 'StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'StartDate_Year' as 'StartDate_Year', 'StartDate_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', 'Amount' as 'Amount', 'Quantity' as 'Quantity', 'Amount_before_adj' as 'Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj';\n forecast_results = filter forecasts_results by {{row(Date_Filter_1.result, [0], [\"Min\",\"Max\"]).asDateRange(\"date('StartDate_Year','StartDate_Month','StartDate_Day')\")}};\n forecast_results = group forecast_results by 'StartDate_Year~~~StartDate_Month';\n forecast_results = foreach forecast_results generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', first('StartDate_Year') as 'StartDate_Year', first('StartDate_Month') as 'StartDate_Month', sum('Amount') as 'Amount', sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity', sum('Amount_before_adj') as 'Amount_before_adj', sum(sum('Amount_before_adj')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount_before_adj', sum('Quantity_before_adj') as 'Quantity_before_adj', sum(sum('Quantity_before_adj')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity_before_adj';\n forecast_results = foreach forecast_results generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'Amount' as 'Amount', 'cumm_Amount' as 'cumm_Amount', 'Quantity' as 'Quantity', 'cumm_Quantity' as 'cumm_Quantity', 'Amount_before_adj' as 'Amount_before_adj', 'cumm_Amount_before_adj' as 'cumm_Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj', 'cumm_Quantity_before_adj' as 'cumm_Quantity_before_adj';\n forecast_results = order forecast_results by 'StartDate_Year~~~StartDate_Month' asc;\n\n  orders = load \"${App.Datasets.MFG_Order_Product.FullyQualifiedName}\";\n orders = filter orders by 'OrderEffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\n orders = filter orders by 'OrderEffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\n orders = group orders by ('OrderEffectiveDate_Year', 'OrderEffectiveDate_Month');\n order_results = foreach orders generate 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('TotalPrice') as 'Amount', sum(sum('TotalPrice')) over ([..0] partition by all order by 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' asc) as 'cumm_Quantity';\n order_results = order order_results by 'StartDate_Year~~~StartDate_Month' asc;\n\n  result = cogroup order_results by 'StartDate_Year~~~StartDate_Month' full, forecast_results by 'StartDate_Year~~~StartDate_Month';\n result = foreach result generate coalesce(forecast_results.'StartDate_Year~~~StartDate_Month', order_results.'StartDate_Year~~~StartDate_Month') as 'StartDate_Year~~~StartDate_Month', coalesce(sum(order_results.'Amount'),0) as 'Actuals', coalesce(sum(forecast_results.'Amount'),0) as 'Forecast', coalesce(sum(order_results.'Quantity'),0) as 'ActualQuantity', coalesce(sum(forecast_results.'Quantity'),0) as 'ForecastQuantity', coalesce(sum(forecast_results.'Amount_before_adj'),0) as 'Forecast_before_adj', coalesce(sum(forecast_results.'Quantity_before_adj'),0) as 'ForecastQuantity_before_adj';\n  result = group result by 'StartDate_Year~~~StartDate_Month';\n result = foreach result generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('Actuals') as 'Actuals', sum('Forecast') as 'Forecast', sum('Forecast_before_adj') as 'Forecast_before_adj', (case when sum('Actuals')==0 then null else abs(sum('Actuals')-sum('Forecast'))/sum('Actuals') end) as 'amount_mape', (case when sum('Actuals')==0 then null else abs(sum('Actuals')-sum('Forecast_before_adj'))/sum('Actuals') end) as 'amount_mape_before_adj', (case when sum('Actuals')==0 then 0 else 1 end) as 'amount_mape_eligibile', (case when sum('ActualQuantity')==0 then null else abs(sum('ActualQuantity')-sum('ForecastQuantity'))/sum('ActualQuantity') end) as 'quantity_mape', (case when sum('ActualQuantity')==0 then null else abs(sum('ActualQuantity')-sum('ForecastQuantity_before_adj'))/sum('ActualQuantity') end) as 'quantity_mape_before_adj', (case when sum('ActualQuantity')==0 then 0 else 1 end) as 'quantity_mape_eligibile';\n result = group result by all;\n result = foreach result generate sum('Forecast') as 'Forecast', sum('Forecast_before_adj') as 'Forecast_before_adj', sum('amount_mape')*100/sum('amount_mape_eligibile') as 'amount_mape', sum('quantity_mape')*100/sum('quantity_mape_eligibile') as 'quantity_mape';\n ",
        "receiveFacetSource" : {
          "mode" : "all",
          "steps" : [ ]
        },
        "selectMode" : "none",
        "start" : [ ],
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : false,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "stack" : false,
            "showPoints" : true,
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "bottom-center",
              "inside" : false
            },
            "axisMode" : "sync",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "time-combo",
            "missingValue" : "connect",
            "showValuesOnLine" : false,
            "timeAxis" : {
              "showTitle" : true,
              "showAxis" : true,
              "referenceLines" : [ ],
              "title" : "Time (Year>Month)"
            },
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "left",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "plots" : {
              "cumm_Amount" : {
                "mark" : "line"
              },
              "cumm_Amount_low_95" : {
                "mark" : "line"
              },
              "Amount" : {
                "mark" : "bar"
              },
              "cumm_Planned_Revenue" : {
                "mark" : "line"
              },
              "cumm_Amount_high_95" : {
                "mark" : "line"
              }
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "Amount",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "MAPE_KPI_3" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "MAPE KPI",
        "numbers" : [ ],
        "query" : "forecasts = load \"${App.Datasets.MFG_Demo_Data.FullyQualifiedName}\";\n forecasts = filter forecasts by 'PeriodStartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\n forecasts = filter forecasts by 'PeriodEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\n forecasts = foreach forecasts generate  {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'AccountProductPeriodForecastId' as 'Id', 'PeriodStartDate_sec_epoch' as 'StartDate_sec_epoch', 'PeriodEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount', 'Forecast' as 'ForecastedRevenue', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedQuantity' as 'ForecastedQuantity';\n Start = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month',                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Amount'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantity' else 'ForecastedQuantityFinal' end as 'Quantity'                ,                   case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyRevenueBAdj' else 'ForecastedRevenue' end as 'Amount_before_adj'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantityBAdj' else 'ForecastedQuantity' end as 'Quantity_before_adj'                , 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\n End_Value = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyAmount' \n    else 0 end as 'Amount', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantity' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantity' \n    else 0 end as 'Quantity', case     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyRevenueBAdj'     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyRevenueBAdj'     else 0 end as 'Amount_before_adj', case     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantityBAdj'    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantityBAdj'     else 0 end as 'Quantity_before_adj', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\n DataForFill = union Start, End_Value;\n  DataForFill = foreach DataForFill generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','Amount' as 'Amount', 'Quantity' as 'Quantity','Amount_before_adj' as 'Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\n FilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\n FilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Amount') as 'Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', sum('Quantity') as 'Quantity', min(first('ForecastedDailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantity', sum('Amount_before_adj') as 'Amount_before_adj', min(first('ForecastedDailyRevenueBAdj'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyRevenueBAdj', sum('Quantity_before_adj') as 'Quantity_before_adj', min(first('ForecastedDailyQuantityBAdj'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantityBAdj';\n FilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', case when 'Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Amount' end as 'Amount', case when 'Quantity' is null then month_days(toDate('Date'))*'ForecastedDailyQuantity' else 'Quantity' end as 'Quantity', case when 'Amount_before_adj' is null then month_days(toDate('Date'))*'ForecastedDailyRevenueBAdj' else 'Amount_before_adj' end as 'Amount_before_adj', case when 'Quantity_before_adj' is null then month_days(toDate('Date'))*'ForecastedDailyQuantityBAdj' else 'Quantity_before_adj' end as 'Quantity_before_adj';\n forecasts_results = group FilledData by ('Date_Year', 'Date_Month');\n forecasts_results = foreach forecasts_results generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', \"01\" as 'StartDate_Day', 'Date_Month' as 'StartDate_Month', sum('Amount') as 'Amount', sum('Quantity') as 'Quantity', sum('Amount_before_adj') as 'Amount_before_adj', sum('Quantity_before_adj') as 'Quantity_before_adj';\n forecasts_results = foreach forecasts_results generate 'StartDate_Year' + \"~~~\" + 'StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'StartDate_Year' as 'StartDate_Year', 'StartDate_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', 'Amount' as 'Amount', 'Quantity' as 'Quantity', 'Amount_before_adj' as 'Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj';\n forecast_results = filter forecasts_results by {{row(Date_Filter_1.result, [0], [\"Min\",\"Max\"]).asDateRange(\"date('StartDate_Year','StartDate_Month','StartDate_Day')\")}};\n forecast_results = group forecast_results by 'StartDate_Year~~~StartDate_Month';\n forecast_results = foreach forecast_results generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', first('StartDate_Year') as 'StartDate_Year', first('StartDate_Month') as 'StartDate_Month', sum('Amount') as 'Amount', sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity', sum('Amount_before_adj') as 'Amount_before_adj', sum(sum('Amount_before_adj')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount_before_adj', sum('Quantity_before_adj') as 'Quantity_before_adj', sum(sum('Quantity_before_adj')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity_before_adj';\n forecast_results = foreach forecast_results generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'Amount' as 'Amount', 'cumm_Amount' as 'cumm_Amount', 'Quantity' as 'Quantity', 'cumm_Quantity' as 'cumm_Quantity', 'Amount_before_adj' as 'Amount_before_adj', 'cumm_Amount_before_adj' as 'cumm_Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj', 'cumm_Quantity_before_adj' as 'cumm_Quantity_before_adj';\n forecast_results = order forecast_results by 'StartDate_Year~~~StartDate_Month' asc;\n\n  orders = load \"${App.Datasets.MFG_Order_Product.FullyQualifiedName}\";\n orders = filter orders by 'OrderEffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\n orders = filter orders by 'OrderEffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\n orders = group orders by ('OrderEffectiveDate_Year', 'OrderEffectiveDate_Month');\n order_results = foreach orders generate 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('TotalPrice') as 'Amount', sum(sum('TotalPrice')) over ([..0] partition by all order by 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' asc) as 'cumm_Quantity';\n order_results = order order_results by 'StartDate_Year~~~StartDate_Month' asc;\n\n  result = cogroup order_results by 'StartDate_Year~~~StartDate_Month' full, forecast_results by 'StartDate_Year~~~StartDate_Month';\n result = foreach result generate coalesce(forecast_results.'StartDate_Year~~~StartDate_Month', order_results.'StartDate_Year~~~StartDate_Month') as 'StartDate_Year~~~StartDate_Month', coalesce(sum(order_results.'Amount'),0) as 'Actuals', coalesce(sum(forecast_results.'Amount'),0) as 'Forecast', coalesce(sum(order_results.'Quantity'),0) as 'ActualQuantity', coalesce(sum(forecast_results.'Quantity'),0) as 'ForecastQuantity', coalesce(sum(forecast_results.'Amount_before_adj'),0) as 'Forecast_before_adj', coalesce(sum(forecast_results.'Quantity_before_adj'),0) as 'ForecastQuantity_before_adj';\n  result = group result by 'StartDate_Year~~~StartDate_Month';\n result = foreach result generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('Actuals') as 'Actuals', sum('Forecast') as 'Forecast', sum('Forecast_before_adj') as 'Forecast_before_adj', (case when sum('Actuals')==0 then null else abs(sum('Actuals')-sum('Forecast'))/sum('Actuals') end) as 'amount_mape', (case when sum('Actuals')==0 then null else abs(sum('Actuals')-sum('Forecast_before_adj'))/sum('Actuals') end) as 'amount_mape_before_adj', (case when sum('Actuals')==0 then 0 else 1 end) as 'amount_mape_eligibile', (case when sum('ActualQuantity')==0 then null else abs(sum('ActualQuantity')-sum('ForecastQuantity'))/sum('ActualQuantity') end) as 'quantity_mape', (case when sum('ActualQuantity')==0 then null else abs(sum('ActualQuantity')-sum('ForecastQuantity_before_adj'))/sum('ActualQuantity') end) as 'quantity_mape_before_adj', (case when sum('ActualQuantity')==0 then 0 else 1 end) as 'quantity_mape_eligibile';\n result = group result by all;\n result = foreach result generate sum('Forecast') as 'Forecast', sum('Forecast_before_adj') as 'Forecast_before_adj', sum('amount_mape')*100/sum('amount_mape_eligibile') as 'amount_mape', sum('quantity_mape')*100/sum('quantity_mape_eligibile') as 'quantity_mape';\n ",
        "receiveFacetSource" : {
          "mode" : "all",
          "steps" : [ ]
        },
        "selectMode" : "none",
        "start" : [ ],
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : false,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "stack" : false,
            "showPoints" : true,
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "bottom-center",
              "inside" : false
            },
            "axisMode" : "sync",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "time-combo",
            "missingValue" : "connect",
            "showValuesOnLine" : false,
            "timeAxis" : {
              "showTitle" : true,
              "showAxis" : true,
              "referenceLines" : [ ],
              "title" : "Time (Year>Month)"
            },
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "left",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "plots" : {
              "cumm_Amount" : {
                "mark" : "line"
              },
              "cumm_Amount_low_95" : {
                "mark" : "line"
              },
              "Amount" : {
                "mark" : "bar"
              },
              "cumm_Planned_Revenue" : {
                "mark" : "line"
              },
              "cumm_Amount_high_95" : {
                "mark" : "line"
              }
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "Amount",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Date_Selector_1" : {
        "broadcastFacet" : false,
        "datasets" : [
          {
            "name" : "${App.Datasets.MFG_Demo_Data.Name}"
          }
        ],
        "isGlobal" : false,
        "query" : {
          "query" : {
            "measures" : [
              [
                "count",
                "*"
              ]
            ],
            "groups" : [
              "StartDate"
            ]
          },
          "version" : -1.0
        },
        "receiveFacetSource" : {
          "mode" : "none",
          "steps" : [ ]
        },
        "selectMode" : "single",
        "start" : [
          [
            [
              "day",
              0
            ],
            [
              "fiscal_year",
              0
            ]
          ]
        ],
        "type" : "aggregateflex",
        "useGlobal" : true,
        "visualizationParameters" : { }
      },
      "Account_Product_Coun_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Account Product Count",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_Demo_Data.FullyQualifiedName}\";\nq = group q by all;\nq = foreach q generate unique('AccountId') as 'unique_Forecast.AccountId', unique('ProductName') as 'unique_AccountProductForecast.ProductId';\nq = limit q 2000;",
        "receiveFacetSource" : {
          "mode" : "all",
          "steps" : [ ]
        },
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Qty_vs_Amount_1" : {
        "broadcastFacet" : false,
        "columns" : {
          "Display" : {
            "type" : "string"
          }
        },
        "label" : "Qty vs Amount",
        "selectMode" : "singlerequired",
        "start" : {
          "display" : [
            "REVENUE"
          ]
        },
        "type" : "staticflex",
        "values" : [
          {
            "display" : "QUANTITY",
            "label" : "Quantity",
            "mape_selector_col" : "measure_quantity",
            "details_table_projection" : "sum('quantity_mape')*100/sum('quantity_mape_eligibile') as 'quantity_mape', sum('ForecastQuantityGap') as 'ForecastQuantityGap', sum('quantity_mape_before_adj')*100/sum('quantity_mape_eligibile') as 'quantity_mape_before_adj', sum('ForecastQuantityGap_before_adj') as 'ForecastQuantityGap_before_adj'",
            "history_measure" : "sum(FilledData.'Forecasted Quantity')",
            "history_trend_measure_name" : "_Quantity'"
          },
          {
            "display" : "REVENUE",
            "label" : "Revenue",
            "mape_selector_col" : "measure_amount",
            "details_table_projection" : "sum('amount_mape')*100/sum('amount_mape_eligibile') as 'amount_mape', sum('ForecastAmountGap') as 'ForecastAmountGap', sum('amount_mape_before_adj')*100/sum('amount_mape_eligibile') as 'amount_mape_before_adj', sum('ForecastAmountGap_before_adj') as 'ForecastAmountGap_before_adj'",
            "history_measure" : "sum(FilledData.'Forecasted Amount')",
            "history_trend_measure_name" : "_Amount'"
          }
        ]
      },
      "Forecast_Status_1" : {
        "broadcastFacet" : true,
        "datasets" : [
          {
            "name" : "${App.Datasets.MFG_Demo_Data.Name}"
          }
        ],
        "isGlobal" : false,
        "query" : {
          "query" : {
            "measures" : [
              [
                "count",
                "*"
              ]
            ],
            "groups" : [
              "ForecastStatus"
            ]
          },
          "version" : -1.0
        },
        "receiveFacetSource" : {
          "mode" : "all",
          "steps" : [ ]
        },
        "selectMode" : "single",
        "start" : [ ],
        "type" : "aggregateflex",
        "useGlobal" : true,
        "visualizationParameters" : { }
      },
      "Forecast_Change_Tren_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Forecast Change Trend",
        "numbers" : [ ],
        "query" : "all_slaps_forecast = load \"${App.Datasets.MFG_Demo_Data.FullyQualifiedName}\";\nall_slaps_forecast = filter all_slaps_forecast by 'PeriodStartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'PeriodEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_forecast = foreach all_slaps_forecast generate 'IdValidFromToKey' as 'IdValidFromToKey', 'ProductName' as 'AccountProductForecast.Name', 'ProductFamily' as 'Product.Family', 'PeriodStartDate_sec_epoch' as 'StartDate_sec_epoch', 'PeriodEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ValidFrom_sec_epoch' as 'ValidFrom_sec_epoch', 'ValidTo_sec_epoch' as 'ValidTo_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 0 as 'DiscountPercentage', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount';\nStart = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'IdValidFromToKey' as 'IdValidFromToKey', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nEnd_Value_Forecasted = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'IdValidFromToKey' as 'IdValidFromToKey', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'ForecastedDailyAmount' else 0 end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nDataForFill_Forecasted = union Start, End_Value_Forecasted;\nDataForFill_Forecasted = foreach DataForFill_Forecasted generate 'IdValidFromToKey' as 'IdValidFromToKey', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Forecasted Amount' as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_Forecasted = fill DataForFill_Forecasted by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='IdValidFromToKey');\nFilledData_Forecasted = group FilledData_Forecasted by ('IdValidFromToKey', 'Date_Year', 'Date_Month');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'IdValidFromToKey', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'IdValidFromToKey' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'IdValidFromToKey' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'IdValidFromToKey' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'IdValidFromToKey' ) as 'End Date', sum('Forecasted Amount') as 'Forecasted Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'IdValidFromToKey' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'IdValidFromToKey' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_Forecasted = filter FilledData_Forecasted by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData = foreach FilledData_Forecasted generate 'IdValidFromToKey', 'Date_Year', 'Date_Month', 'SalesPrice' as 'SalesPrice', (case when 'Forecasted Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Forecasted Amount' end) as 'Forecasted Amount';\nFilledData = foreach FilledData generate 'IdValidFromToKey', 'Date_Year', 'Date_Month', 'SalesPrice' as 'SalesPrice', 'Forecasted Amount' as 'Forecasted Amount', case when 'SalesPrice' is null then 0 else 'Forecasted Amount'/'SalesPrice' end as 'Forecasted Quantity';\nFilledData = foreach FilledData generate 'IdValidFromToKey', 'Date_Year', 'Date_Month', 'Forecasted Amount' as 'Forecasted Amount', case when 'SalesPrice' is null then 0 else 'Forecasted Amount'/'SalesPrice' end as 'Forecasted Quantity';\nresult = group FilledData by 'IdValidFromToKey' left, all_slaps_forecast by 'IdValidFromToKey';\nresult = foreach result generate  FilledData.'IdValidFromToKey' as 'IdValidFromToKey', first(FilledData.'Date_Year') + \"~~~\" + first(FilledData.'Date_Month') as 'StartDate_Year~~~StartDate_Month', \n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Cur_Min_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Cur_Min_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Cur_Min_ForecastedMeasure',\n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"First_Min_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"First_Min_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'First_Min_ForecastedMeasure',\n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Second_Min_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Second_Min_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Second_Min_ForecastedMeasure',\n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Third_Min_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Third_Min_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Third_Min_ForecastedMeasure',\n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Fourth_Min_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Fourth_Min_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Fourth_Min_ForecastedMeasure',\n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Fifth_Min_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Fifth_Min_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Fifth_Min_ForecastedMeasure',\n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Sixth_Min_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Sixth_Min_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Sixth_Min_ForecastedMeasure',\n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Seventh_Min_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Seventh_Min_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Seventh_Min_ForecastedMeasure',\n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Eighth_Min_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Eighth_Min_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Eighth_Min_ForecastedMeasure',\n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Ninth_Min_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Ninth_Min_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Ninth_Min_ForecastedMeasure',\n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Tenth_Min_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Tenth_Min_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Tenth_Min_ForecastedMeasure',\n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Eleventh_Min_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Eleventh_Min_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Eleventh_Min_ForecastedMeasure',\n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Twelfth_Min_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Twelfth_Min_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then {{cell(Qty_vs_Amount_1.selection, 0, \"history_measure\").asString()}} end as 'Twelfth_Min_ForecastedMeasure';\nresult = group result by 'StartDate_Year~~~StartDate_Month';\nresult = foreach result generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', \nsum(Cur_Min_ForecastedMeasure) as {{cell(Min_and_max_dates_1.result, 0, \"Cur_Month_Amount_Quantity_Name\").asString()}},sum(First_Min_ForecastedMeasure) as {{cell(Min_and_max_dates_1.result, 0, \"First_Month_Amount_Quantity_Name\").asString()}},sum(Second_Min_ForecastedMeasure) as {{cell(Min_and_max_dates_1.result, 0, \"Second_Month_Amount_Quantity_Name\").asString()}},\nsum(Third_Min_ForecastedMeasure) as {{cell(Min_and_max_dates_1.result, 0, \"Third_Month_Amount_Quantity_Name\").asString()}},sum(Fourth_Min_ForecastedMeasure) as {{cell(Min_and_max_dates_1.result, 0, \"Fourth_Month_Amount_Quantity_Name\").asString()}},sum(Fifth_Min_ForecastedMeasure) as {{cell(Min_and_max_dates_1.result, 0, \"Fifth_Month_Amount_Quantity_Name\").asString()}},\nsum(Sixth_Min_ForecastedMeasure) as {{cell(Min_and_max_dates_1.result, 0, \"Sixth_Month_Amount_Quantity_Name\").asString()}},sum(Seventh_Min_ForecastedMeasure) as {{cell(Min_and_max_dates_1.result, 0, \"Seventh_Month_Amount_Quantity_Name\").asString()}},sum(Eighth_Min_ForecastedMeasure) as {{cell(Min_and_max_dates_1.result, 0, \"Eighth_Month_Amount_Quantity_Name\").asString()}},\nsum(Ninth_Min_ForecastedMeasure) as {{cell(Min_and_max_dates_1.result, 0, \"Ninth_Month_Amount_Quantity_Name\").asString()}},sum(Tenth_Min_ForecastedMeasure) as {{cell(Min_and_max_dates_1.result, 0, \"Tenth_Month_Amount_Quantity_Name\").asString()}},sum(Eleventh_Min_ForecastedMeasure) as {{cell(Min_and_max_dates_1.result, 0, \"Eleventh_Month_Amount_Quantity_Name\").asString()}},\nsum(Twelfth_Min_ForecastedMeasure) as {{cell(Min_and_max_dates_1.result, 0, \"Twelfth_Month_Amount_Quantity_Name\").asString()}};\nresult  = foreach result generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', {{cell(Min_and_max_dates_1.result, 0, \"Amount_Measure_Names\").asString()}};",
        "receiveFacetSource" : {
          "mode" : "all",
          "steps" : [ ]
        },
        "selectMode" : "single",
        "start" : [ ],
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showPoints" : false,
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "sync",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "time",
            "missingValue" : "connect",
            "dashLine" : {
              "measures" : "",
              "showDashLine" : false
            },
            "timeAxis" : {
              "showTitle" : true,
              "showAxis" : true,
              "title" : ""
            },
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "fillArea" : true,
            "showActionMenu" : true,
            "showZero" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "valueType" : "none",
            "theme" : "wave",
            "applyConditionalFormatting" : true,
            "drawArea" : {
              "measure" : "",
              "showDrawArea" : false,
              "bounding1" : "",
              "bounding2" : ""
            }
          },
          "type" : "chart"
        }
      },
      "Details_Table_for_Hi_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Details Table for History",
        "numbers" : [ ],
        "query" : "all_slaps_forecast = load \"${App.Datasets.MFG_Demo_Data.FullyQualifiedName}\";\nall_slaps_forecast = filter all_slaps_forecast by 'PeriodStartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'PeriodEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_forecast = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End','AccountProductPeriodForecastId' as 'Id', 'AccountName' as 'Account.Name','PeriodName' as 'Name', 'ProductName' as 'AccountProductForecast.Name', 'ProductFamily' as 'Product.Family', 'PeriodStartDate_sec_epoch' as 'StartDate_sec_epoch', 'PeriodEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 'Forecast'/'ForecastedQuantity' as 'SalesPriceBAdj', 0 as 'DiscountPercentage', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'Forecast' as 'ForecastedAmountBAdj', 'ForecastedQuantity' as 'ForecastedQuantityBAdj', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount','ForecastedDailyRevenueBAdj' as 'ForecastedDailyAmountBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj';\nStart = foreach all_slaps_forecast generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', 'SalesPriceBAdj' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPriceBAdj', case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmountBAdj' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyAmountBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyAmountBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmountBAdj' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyAmountBAdj' else 'ForecastedAmountBAdj' end as 'Forecasted Amount Before Adj', 'ForecastedDailyAmountBAdj' as 'ForecastedDailyAmountBAdj';\nEnd_Value_Forecasted = foreach all_slaps_forecast generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', 'SalesPriceBAdj' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPriceBAdj', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= 'End'))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyAmount' else 0 end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= 'End'))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmountBAdj' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyAmountBAdj' else 0 end as 'Forecasted Amount Before Adj', 'ForecastedDailyAmountBAdj' as 'ForecastedDailyAmountBAdj';\nDataForFill_Forecasted = union Start, End_Value_Forecasted;\nDataForFill_Forecasted = foreach DataForFill_Forecasted generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'SalesPriceBAdj' as 'SalesPriceBAdj', 'Forecasted Amount' as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'Forecasted Amount Before Adj' as 'Forecasted Amount Before Adj', 'ForecastedDailyAmountBAdj' as 'ForecastedDailyAmountBAdj';\nFilledData_Forecasted = fill DataForFill_Forecasted by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\nFilledData_Forecasted = group FilledData_Forecasted by ('Id', 'Date_Year', 'Date_Month');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Forecasted Amount') as 'Forecasted Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPrice', sum('Forecasted Amount Before Adj') as 'Forecasted Amount Before Adj', min(first('ForecastedDailyAmountBAdj'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmountBAdj', min(first('SalesPriceBAdj'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'SalesPriceBAdj';\nFilledData_Forecasted = filter FilledData_Forecasted by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData = foreach FilledData_Forecasted generate 'Id', 'Date_Year', 'Date_Month', 'SalesPrice' as 'SalesPrice', 'SalesPriceBAdj' as 'SalesPriceBAdj', (case when 'Forecasted Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Forecasted Amount' end) as 'Forecasted Amount', (case when 'Forecasted Amount Before Adj' is null then month_days(toDate('Date'))*'ForecastedDailyAmountBAdj' else 'Forecasted Amount Before Adj' end) as 'Forecasted Amount Before Adj';\nFilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', 'SalesPrice' as 'SalesPrice', 'SalesPriceBAdj' as 'SalesPriceBAdj', 'Forecasted Amount' as 'Forecasted Amount', coalesce('Forecasted Amount'/'SalesPrice',0) as 'Forecasted Quantity', 'Forecasted Amount Before Adj' as 'Forecasted Amount Before Adj', coalesce('Forecasted Amount Before Adj'/'SalesPriceBAdj',0) as 'Forecasted Quantity Before Adj';\nresult = group FilledData by 'Id' left, all_slaps_forecast by 'Id';\nresult = foreach result generate  first(all_slaps_forecast.'Account.Name') as 'Account.Name', first(all_slaps_forecast.'AccountProductForecast.Name') as 'AccountProductForecast.Name', first(all_slaps_forecast.'Name') as 'Name', sum(FilledData.'Forecasted Quantity') as 'ForecastedQuantity', sum(FilledData.'Forecasted Amount') as 'ForecastedAmount', sum(FilledData.'Forecasted Quantity Before Adj') as 'ForecastedQuantityBAdj', sum(FilledData.'Forecasted Amount Before Adj') as 'ForecastedAmountBAdj';\nresult = group result by ('Account.Name','AccountProductForecast.Name','Name');\nresult = foreach result generate 'Account.Name','AccountProductForecast.Name','Name', sum('ForecastedAmountBAdj') as 'DerivedForecastedAmount', sum('ForecastedQuantityBAdj') as 'ForecastedQuantity', sum('ForecastedAmount') as 'ForecastedAmountAdj', sum('ForecastedQuantity') as 'ForecastQuantityAdj';\nresult = order result by DerivedForecastedAmount desc nulls last;",
        "receiveFacetSource" : {
          "mode" : "all",
          "steps" : [ ]
        },
        "selectMode" : "single",
        "start" : [ ],
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "MAPE_by_Prod" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "MAPE by Prod",
        "numbers" : [ ],
        "query" : "forecasts = load \"${App.Datasets.MFG_Demo_Data.FullyQualifiedName}\";\n forecasts = filter forecasts by 'PeriodStartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\n forecasts = filter forecasts by 'PeriodEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\n forecasts = foreach forecasts generate  {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'AccountProductPeriodForecastId' as 'Id', 'ProductName' as 'AccountProductForecast.Name', 'ProductFamily' as 'Product.Family', 'PeriodStartDate_sec_epoch' as 'StartDate_sec_epoch', 'PeriodEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount', 'Forecast' as 'ForecastedRevenue', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedQuantity' as 'ForecastedQuantity';\n Start = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'AccountProductForecast.Name' as 'AccountProductForecast.Name', 'Product.Family' as 'Product.Family', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month',                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Amount'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantity' else 'ForecastedQuantityFinal' end as 'Quantity'                ,                   case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyRevenueBAdj' else 'ForecastedRevenue' end as 'Amount_before_adj'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantityBAdj' else 'ForecastedQuantity' end as 'Quantity_before_adj'                , 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\n End_Value = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'AccountProductForecast.Name' as 'AccountProductForecast.Name', 'Product.Family' as 'Product.Family', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyAmount' \n    else 0 end as 'Amount', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantity' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantity' \n    else 0 end as 'Quantity', case     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyRevenueBAdj'     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyRevenueBAdj'     else 0 end as 'Amount_before_adj', case     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantityBAdj'    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantityBAdj'     else 0 end as 'Quantity_before_adj', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\n DataForFill = union Start, End_Value;\n DataForFill = foreach DataForFill generate 'Id' as 'Id', 'AccountProductForecast.Name' as 'AccountProductForecast.Name', 'Product.Family' as 'Product.Family', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','Amount' as 'Amount', 'Quantity' as 'Quantity','Amount_before_adj' as 'Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\n FilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\n FilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\n FilledData = foreach FilledData generate 'Id', first('AccountProductForecast.Name') as 'AccountProductForecast.Name', first('Product.Family') as 'Product.Family', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Amount') as 'Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', sum('Quantity') as 'Quantity', min(first('ForecastedDailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantity', sum('Amount_before_adj') as 'Amount_before_adj', min(first('ForecastedDailyRevenueBAdj'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyRevenueBAdj', sum('Quantity_before_adj') as 'Quantity_before_adj', min(first('ForecastedDailyQuantityBAdj'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantityBAdj';\n FilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\n FilledData = foreach FilledData generate 'Id', 'AccountProductForecast.Name' as 'AccountProductForecast.Name', 'Product.Family' as 'Product.Family', 'Date_Year', 'Date_Month', case when 'Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Amount' end as 'Amount', case when 'Quantity' is null then month_days(toDate('Date'))*'ForecastedDailyQuantity' else 'Quantity' end as 'Quantity', case when 'Amount_before_adj' is null then month_days(toDate('Date'))*'ForecastedDailyRevenueBAdj' else 'Amount_before_adj' end as 'Amount_before_adj', case when 'Quantity_before_adj' is null then month_days(toDate('Date'))*'ForecastedDailyQuantityBAdj' else 'Quantity_before_adj' end as 'Quantity_before_adj';\n forecasts_results = group FilledData by ('AccountProductForecast.Name', 'Date_Year', 'Date_Month');\n forecasts_results = foreach forecasts_results generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', \"01\" as 'StartDate_Day', 'Date_Month' as 'StartDate_Month', 'AccountProductForecast.Name' as 'AccountProductForecast.Name', first('Product.Family') as 'Product.Family', sum('Amount') as 'Amount', sum('Quantity') as 'Quantity', sum('Amount_before_adj') as 'Amount_before_adj', sum('Quantity_before_adj') as 'Quantity_before_adj';\n forecasts_results = foreach forecasts_results generate 'StartDate_Year' + \"~~~\" + 'StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'StartDate_Year' as 'StartDate_Year', 'StartDate_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', 'AccountProductForecast.Name' as 'AccountProductForecast.Name', 'Product.Family' as 'Product.Family', 'Amount' as 'Amount', 'Quantity' as 'Quantity', 'Amount_before_adj' as 'Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj';\n forecast_results = filter forecasts_results by {{row(Date_Filter_1.result, [0], [\"Min\",\"Max\"]).asDateRange(\"date('StartDate_Year','StartDate_Month','StartDate_Day')\")}};\n forecast_results = group forecast_results by ('AccountProductForecast.Name', 'StartDate_Year~~~StartDate_Month');\n forecast_results = foreach forecast_results generate 'AccountProductForecast.Name' as 'AccountProductForecast.Name', first('Product.Family') as 'Product.Family', 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', first('StartDate_Year') as 'StartDate_Year', first('StartDate_Month') as 'StartDate_Month', sum('Amount') as 'Amount', sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity', sum('Amount_before_adj') as 'Amount_before_adj', sum(sum('Amount_before_adj')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount_before_adj', sum('Quantity_before_adj') as 'Quantity_before_adj', sum(sum('Quantity_before_adj')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity_before_adj';\n forecast_results = foreach forecast_results generate 'AccountProductForecast.Name' as 'AccountProductForecast.Name', 'Product.Family' as 'Product.Family', 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'Amount' as 'Amount', 'cumm_Amount' as 'cumm_Amount', 'Quantity' as 'Quantity', 'cumm_Quantity' as 'cumm_Quantity', 'Amount_before_adj' as 'Amount_before_adj', 'cumm_Amount_before_adj' as 'cumm_Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj', 'cumm_Quantity_before_adj' as 'cumm_Quantity_before_adj';\n forecast_results = order forecast_results by 'StartDate_Year~~~StartDate_Month' asc;\n\n  orders = load \"${App.Datasets.MFG_Order_Product.FullyQualifiedName}\";\n  orders = filter orders by 'OrderEffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\n orders = filter orders by 'OrderEffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\n orders = group orders by ('ProductName', 'OrderEffectiveDate_Year', 'OrderEffectiveDate_Month');\n order_results = foreach orders generate 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' as 'StartDate_Year~~~StartDate_Month', 'ProductName' as 'Product.Name', first('ProductFamily') as 'Product.Family', sum('TotalPrice') as 'Amount', sum(sum('TotalPrice')) over ([..0] partition by all order by 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' asc) as 'cumm_Quantity';\n order_results = order order_results by 'StartDate_Year~~~StartDate_Month' asc;\n\n  result = cogroup order_results by ('Product.Name', 'StartDate_Year~~~StartDate_Month') full, forecast_results by ('AccountProductForecast.Name', 'StartDate_Year~~~StartDate_Month');\n result = foreach result generate coalesce(forecast_results.'StartDate_Year~~~StartDate_Month', order_results.'StartDate_Year~~~StartDate_Month') as 'StartDate_Year~~~StartDate_Month',  coalesce(forecast_results.'AccountProductForecast.Name', order_results.'Product.Name') as 'Product.Name',  coalesce(first(forecast_results.'Product.Family'), first(order_results.'Product.Family')) as 'Product.Family', coalesce(sum(order_results.'Amount'),0) as 'Actuals', coalesce(sum(forecast_results.'Amount'),0) as 'Forecast', coalesce(sum(forecast_results.'Amount_before_adj'),0) as 'Forecast_before_adj', coalesce(sum(order_results.'Quantity'),0) as 'ActualQuantity', coalesce(sum(forecast_results.'Quantity'),0) as 'ForecastQuantity', coalesce(sum(forecast_results.'Quantity_before_adj'),0) as 'ForecastQuantity_before_adj';\n  result = group result by ('Product.Name', 'StartDate_Year~~~StartDate_Month');\n result = foreach result generate 'Product.Name' as 'Product.Name', first('Product.Family') as 'Product.Family', 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('Actuals') as 'Actuals', sum('Forecast') as 'Forecast', sum('Actuals')-sum('Forecast') as 'ForecastAmountGap', (case when sum('Actuals')==0 then null else abs(sum('Actuals')-sum('Forecast'))/sum('Actuals') end) as 'amount_mape', sum('Actuals')-sum('Forecast_before_adj') as 'ForecastAmountGap_before_adj', (case when sum('Actuals')==0 then null else abs(sum('Actuals')-sum('Forecast_before_adj'))/sum('Actuals') end) as 'amount_mape_before_adj', (case when sum('Actuals')==0 then 0 else 1 end) as 'amount_mape_eligibile', (case when sum('ActualQuantity')==0 then null else abs(sum('ActualQuantity')-sum('ForecastQuantity'))/sum('ActualQuantity') end) as 'quantity_mape', (case when sum('ActualQuantity')==0 then 0 else 1 end) as 'quantity_mape_eligibile', sum('ActualQuantity')-sum('ForecastQuantity') as 'ForecastQuantityGap', (case when sum('ActualQuantity')==0 then null else abs(sum('ActualQuantity')-sum('ForecastQuantity_before_adj'))/sum('ActualQuantity') end) as 'quantity_mape_before_adj', sum('ActualQuantity')-sum('ForecastQuantity_before_adj') as 'ForecastQuantityGap_before_adj';\n result = group result by '{{column(Prod_vs_Prod_Family_1.selection, [\"grouping\"]).asObject()}}';\n result = foreach result generate '{{column(Prod_vs_Prod_Family_1.selection, [\"grouping\"]).asObject()}}' as '{{column(Prod_vs_Prod_Family_1.selection, [\"grouping\"]).asObject()}}', sum('amount_mape')*100/sum('amount_mape_eligibile') as 'amount_mape', sum('quantity_mape')*100/sum('quantity_mape_eligibile') as 'quantity_mape', sum('ForecastAmountGap') as 'ForecastAmountGap', sum('ForecastQuantityGap') as 'ForecastQuantityGap', sum('amount_mape_before_adj')*100/sum('amount_mape_eligibile') as 'amount_mape_before_adj', sum('quantity_mape_before_adj')*100/sum('quantity_mape_eligibile') as 'quantity_mape_before_adj', sum('ForecastAmountGap_before_adj') as 'ForecastAmountGap_before_adj', sum('ForecastQuantityGap_before_adj') as 'ForecastQuantityGap_before_adj';\n result = foreach result generate '{{column(Prod_vs_Prod_Family_1.selection, [\"grouping\"]).asObject()}}' as '{{column(Prod_vs_Prod_Family_1.selection, [\"forecasts_col\"]).asObject()}}', {{column(measure_selector_for_2.selection, column(Qty_vs_Amount_1.selection, [\"mape_selector_col\"])).asObject()}} as {{column(measure_selector_for_2.selection, column(Qty_vs_Amount_1.selection, [\"mape_selector_col\"])).asObject()}};\n result = order result by {{column(measure_selector_for_2.selection, column(Qty_vs_Amount_1.selection, [\"mape_selector_col\"])).asObject()}} desc nulls last;\n",
        "receiveFacetSource" : {
          "mode" : "all",
          "steps" : [ ]
        },
        "selectMode" : "multi",
        "start" : [ ],
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : false,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "stack" : false,
            "showPoints" : true,
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "bottom-center",
              "inside" : false
            },
            "axisMode" : "sync",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "time-combo",
            "missingValue" : "connect",
            "showValuesOnLine" : false,
            "timeAxis" : {
              "showTitle" : true,
              "showAxis" : true,
              "referenceLines" : [ ],
              "title" : "Time (Year>Month)"
            },
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "left",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "plots" : {
              "cumm_Amount" : {
                "mark" : "line"
              },
              "cumm_Amount_low_95" : {
                "mark" : "line"
              },
              "Amount" : {
                "mark" : "bar"
              },
              "cumm_Planned_Revenue" : {
                "mark" : "line"
              },
              "cumm_Amount_high_95" : {
                "mark" : "line"
              }
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "Amount",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "MAPE_by_Accounts_2" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "MAPE by Accounts",
        "numbers" : [ ],
        "query" : "forecasts = load \"${App.Datasets.MFG_Demo_Data.FullyQualifiedName}\";\n forecasts = filter forecasts by 'PeriodStartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\n forecasts = filter forecasts by 'PeriodEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\n forecasts = foreach forecasts generate  {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'AccountProductPeriodForecastId' as 'Id', 'AccountName' as 'Account.Name', 'PeriodStartDate_sec_epoch' as 'StartDate_sec_epoch', 'PeriodEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount', 'Forecast' as 'ForecastedRevenue', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedQuantity' as 'ForecastedQuantity';\n Start = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'Account.Name' as 'Account.Name', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month',                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Amount'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantity' else 'ForecastedQuantityFinal' end as 'Quantity',                   case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyRevenueBAdj' else 'ForecastedRevenue' end as 'Amount_before_adj'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantityBAdj' else 'ForecastedQuantity' end as 'Quantity_before_adj'                                 , 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\n End_Value = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'Account.Name' as 'Account.Name', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyAmount' \n    else 0 end as 'Amount', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantity' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantity' \n    else 0 end as 'Quantity', case     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyRevenueBAdj'     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyRevenueBAdj'     else 0 end as 'Amount_before_adj',  case     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantityBAdj'    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantityBAdj'     else 0 end as 'Quantity_before_adj', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal';\n DataForFill = union Start, End_Value;\n  DataForFill = foreach DataForFill generate 'Id' as 'Id', 'Account.Name' as 'Account.Name', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','Amount' as 'Amount', 'Quantity' as 'Quantity','Amount_before_adj' as 'Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\n FilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\n FilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\n FilledData = foreach FilledData generate 'Id', first('Account.Name') as 'Account.Name', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Amount') as 'Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', sum('Quantity') as 'Quantity', min(first('ForecastedDailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantity', sum('Amount_before_adj') as 'Amount_before_adj', min(first('ForecastedDailyRevenueBAdj'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyRevenueBAdj', sum('Quantity_before_adj') as 'Quantity_before_adj', min(first('ForecastedDailyQuantityBAdj'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantityBAdj';\n FilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\n FilledData = foreach FilledData generate 'Id', 'Account.Name' as 'Account.Name', 'Date_Year', 'Date_Month', case when 'Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Amount' end as 'Amount', case when 'Quantity' is null then month_days(toDate('Date'))*'ForecastedDailyQuantity' else 'Quantity' end as 'Quantity', case when 'Amount_before_adj' is null then month_days(toDate('Date'))*'ForecastedDailyRevenueBAdj' else 'Amount_before_adj' end as 'Amount_before_adj', case when 'Quantity_before_adj' is null then month_days(toDate('Date'))*'ForecastedDailyQuantityBAdj' else 'Quantity_before_adj' end as 'Quantity_before_adj';\n forecasts_results = group FilledData by ('Account.Name', 'Date_Year', 'Date_Month');\n forecasts_results = foreach forecasts_results generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', \"01\" as 'StartDate_Day', 'Date_Month' as 'StartDate_Month', 'Account.Name' as 'Account.Name', sum('Amount') as 'Amount', sum('Quantity') as 'Quantity', sum('Amount_before_adj') as 'Amount_before_adj', sum('Quantity_before_adj') as 'Quantity_before_adj';\n forecasts_results = foreach forecasts_results generate 'StartDate_Year' + \"~~~\" + 'StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'StartDate_Year' as 'StartDate_Year', 'StartDate_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', 'Account.Name' as 'Account.Name', 'Amount' as 'Amount', 'Quantity' as 'Quantity', 'Amount_before_adj' as 'Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj';\n forecast_results = filter forecasts_results by {{row(Date_Filter_1.result, [0], [\"Min\",\"Max\"]).asDateRange(\"date('StartDate_Year','StartDate_Month','StartDate_Day')\")}};\n forecast_results = group forecast_results by ('Account.Name', 'StartDate_Year~~~StartDate_Month');\n forecast_results = foreach forecast_results generate 'Account.Name' as 'Account.Name', 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', first('StartDate_Year') as 'StartDate_Year', first('StartDate_Month') as 'StartDate_Month', sum('Amount') as 'Amount', sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity', sum('Amount_before_adj') as 'Amount_before_adj', sum(sum('Amount_before_adj')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount_before_adj', sum('Quantity_before_adj') as 'Quantity_before_adj', sum(sum('Quantity_before_adj')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity_before_adj';\n forecast_results = foreach forecast_results generate 'Account.Name' as 'Account.Name', 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'Amount' as 'Amount', 'cumm_Amount' as 'cumm_Amount', 'Quantity' as 'Quantity', 'cumm_Quantity' as 'cumm_Quantity', 'Amount_before_adj' as 'Amount_before_adj', 'cumm_Amount_before_adj' as 'cumm_Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj', 'cumm_Quantity_before_adj' as 'cumm_Quantity_before_adj';\n forecast_results = order forecast_results by 'StartDate_Year~~~StartDate_Month' asc;\n\n  orders = load \"${App.Datasets.MFG_Order_Product.FullyQualifiedName}\";\n orders = filter orders by 'OrderEffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\n orders = filter orders by 'OrderEffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\n orders = group orders by ('OrderAccountName', 'OrderEffectiveDate_Year', 'OrderEffectiveDate_Month');\n order_results = foreach orders generate 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' as 'StartDate_Year~~~StartDate_Month', 'OrderAccountName' as 'Account.Name', sum('TotalPrice') as 'Amount', sum(sum('TotalPrice')) over ([..0] partition by all order by 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' asc) as 'cumm_Quantity';\n order_results = order order_results by 'StartDate_Year~~~StartDate_Month' asc;\n\n  result = cogroup order_results by ('Account.Name', 'StartDate_Year~~~StartDate_Month') full, forecast_results by ('Account.Name', 'StartDate_Year~~~StartDate_Month');\n result = foreach result generate coalesce(forecast_results.'StartDate_Year~~~StartDate_Month', order_results.'StartDate_Year~~~StartDate_Month') as 'StartDate_Year~~~StartDate_Month',  coalesce(forecast_results.'Account.Name', order_results.'Account.Name') as 'Account.Name', coalesce(sum(order_results.'Amount'),0) as 'Actuals', coalesce(sum(forecast_results.'Amount'),0) as 'Forecast', coalesce(sum(forecast_results.'Amount_before_adj'),0) as 'Forecast_before_adj', coalesce(sum(order_results.'Quantity'),0) as 'ActualQuantity', coalesce(sum(forecast_results.'Quantity'),0) as 'ForecastQuantity', coalesce(sum(forecast_results.'Quantity_before_adj'),0) as 'ForecastQuantity_before_adj';\n  result = group result by ('Account.Name', 'StartDate_Year~~~StartDate_Month');\n result = foreach result generate 'Account.Name' as 'Account.Name', 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('Actuals') as 'Actuals', sum('Forecast') as 'Forecast', sum('Actuals')-sum('Forecast') as 'ForecastAmountGap', (case when sum('Actuals')==0 then null else abs(sum('Actuals')-sum('Forecast'))/sum('Actuals') end) as 'amount_mape', sum('Actuals')-sum('Forecast_before_adj') as 'ForecastAmountGap_before_adj', (case when sum('Actuals')==0 then null else abs(sum('Actuals')-sum('Forecast_before_adj'))/sum('Actuals') end) as 'amount_mape_before_adj', (case when sum('Actuals')==0 then 0 else 1 end) as 'amount_mape_eligible', (case when sum('ActualQuantity')==0 then null else abs(sum('ActualQuantity')-sum('ForecastQuantity'))/sum('ActualQuantity') end) as 'quantity_mape', (case when sum('ActualQuantity')==0 then 0 else 1 end) as 'quantity_mape_eligible', sum('ActualQuantity')-sum('ForecastQuantity') as 'ForecastQuantityGap', (case when sum('ActualQuantity')==0 then null else abs(sum('ActualQuantity')-sum('ForecastQuantity_before_adj'))/sum('ActualQuantity') end) as 'quantity_mape_before_adj', sum('ActualQuantity')-sum('ForecastQuantity_before_adj') as 'ForecastQuantityGap_before_adj';\n result = group result by 'StartDate_Year~~~StartDate_Month';\n result = foreach result generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('amount_mape')*100/sum('amount_mape_eligible') as 'amount_mape', sum('quantity_mape')*100/sum('quantity_mape_eligible') as 'quantity_mape', sum('ForecastAmountGap') as 'ForecastAmountGap', sum('ForecastQuantityGap') as 'ForecastQuantityGap', sum('amount_mape_before_adj')*100/sum('amount_mape_eligible') as 'amount_mape_before_adj', sum('quantity_mape_before_adj')*100/sum('quantity_mape_eligible') as 'quantity_mape_before_adj', sum('ForecastAmountGap_before_adj') as 'ForecastAmountGap_before_adj', sum('ForecastQuantityGap_before_adj') as 'ForecastQuantityGap_before_adj', sum(sum('amount_mape')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month')*100/sum(coalesce(sum('amount_mape_eligible'),0)) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month') as 'amount_mape_cumulative';\n result = foreach result generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'ForecastAmountGap' as 'ForecastAmountGap', 'ForecastAmountGap_before_adj' as 'ForecastAmountGap_before_adj';\n ",
        "receiveFacetSource" : {
          "mode" : "all",
          "steps" : [ ]
        },
        "selectMode" : "none",
        "start" : [ ],
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : false,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "stack" : false,
            "showPoints" : true,
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "bottom-center",
              "inside" : false
            },
            "axisMode" : "sync",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "time-combo",
            "missingValue" : "connect",
            "showValuesOnLine" : false,
            "timeAxis" : {
              "showTitle" : true,
              "showAxis" : true,
              "referenceLines" : [ ],
              "title" : "Time (Year>Month)"
            },
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "left",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "plots" : {
              "cumm_Amount" : {
                "mark" : "line"
              },
              "cumm_Amount_low_95" : {
                "mark" : "line"
              },
              "Amount" : {
                "mark" : "bar"
              },
              "cumm_Planned_Revenue" : {
                "mark" : "line"
              },
              "cumm_Amount_high_95" : {
                "mark" : "line"
              }
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "Amount",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Product_Family_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Product_Family_Filter",
        "numbers" : [ ],
        "query" : "forecasts = load \"${App.Datasets.MFG_Demo_Data.FullyQualifiedName}\";\norders = load \"${App.Datasets.MFG_Order_Product.FullyQualifiedName}\";\nresult = cogroup orders by 'ProductFamily' full, forecasts by 'ProductFamily';\nresult = foreach result generate coalesce(forecasts.'ProductFamily', orders.'ProductFamily') as 'ProductFamily';\nresult = order result by 'ProductFamily' asc;",
        "receiveFacetSource" : {
          "mode" : "all",
          "steps" : [ ]
        },
        "selectMode" : "single",
        "start" : [ ],
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "MAPE_by_Accounts_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "MAPE by Accounts",
        "numbers" : [ ],
        "query" : "forecasts = load \"${App.Datasets.MFG_Demo_Data.FullyQualifiedName}\";\n forecasts = filter forecasts by 'PeriodStartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\n forecasts = filter forecasts by 'PeriodEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\n forecasts = foreach forecasts generate  {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'AccountProductPeriodForecastId' as 'Id', 'AccountName' as 'Account.Name', 'PeriodStartDate_sec_epoch' as 'StartDate_sec_epoch', 'PeriodEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount', 'Forecast' as 'ForecastedRevenue', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedQuantity' as 'ForecastedQuantity';\n Start = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'Account.Name' as 'Account.Name', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month',                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Amount'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantity' else 'ForecastedQuantityFinal' end as 'Quantity',                   case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyRevenueBAdj' else 'ForecastedRevenue' end as 'Amount_before_adj'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantityBAdj' else 'ForecastedQuantity' end as 'Quantity_before_adj'                                 , 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\n End_Value = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'Account.Name' as 'Account.Name', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyAmount' \n    else 0 end as 'Amount', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantity' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantity' \n    else 0 end as 'Quantity', case     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyRevenueBAdj'     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyRevenueBAdj'     else 0 end as 'Amount_before_adj',  case     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantityBAdj'    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantityBAdj'     else 0 end as 'Quantity_before_adj', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal';\n DataForFill = union Start, End_Value;\n  DataForFill = foreach DataForFill generate 'Id' as 'Id', 'Account.Name' as 'Account.Name', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','Amount' as 'Amount', 'Quantity' as 'Quantity','Amount_before_adj' as 'Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\n FilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\n FilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\n FilledData = foreach FilledData generate 'Id', first('Account.Name') as 'Account.Name', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Amount') as 'Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', sum('Quantity') as 'Quantity', min(first('ForecastedDailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantity', sum('Amount_before_adj') as 'Amount_before_adj', min(first('ForecastedDailyRevenueBAdj'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyRevenueBAdj', sum('Quantity_before_adj') as 'Quantity_before_adj', min(first('ForecastedDailyQuantityBAdj'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantityBAdj';\n FilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\n FilledData = foreach FilledData generate 'Id', 'Account.Name' as 'Account.Name', 'Date_Year', 'Date_Month', case when 'Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Amount' end as 'Amount', case when 'Quantity' is null then month_days(toDate('Date'))*'ForecastedDailyQuantity' else 'Quantity' end as 'Quantity', case when 'Amount_before_adj' is null then month_days(toDate('Date'))*'ForecastedDailyRevenueBAdj' else 'Amount_before_adj' end as 'Amount_before_adj', case when 'Quantity_before_adj' is null then month_days(toDate('Date'))*'ForecastedDailyQuantityBAdj' else 'Quantity_before_adj' end as 'Quantity_before_adj';\n forecasts_results = group FilledData by ('Account.Name', 'Date_Year', 'Date_Month');\n forecasts_results = foreach forecasts_results generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', \"01\" as 'StartDate_Day', 'Date_Month' as 'StartDate_Month', 'Account.Name' as 'Account.Name', sum('Amount') as 'Amount', sum('Quantity') as 'Quantity', sum('Amount_before_adj') as 'Amount_before_adj', sum('Quantity_before_adj') as 'Quantity_before_adj';\n forecasts_results = foreach forecasts_results generate 'StartDate_Year' + \"~~~\" + 'StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'StartDate_Year' as 'StartDate_Year', 'StartDate_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', 'Account.Name' as 'Account.Name', 'Amount' as 'Amount', 'Quantity' as 'Quantity', 'Amount_before_adj' as 'Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj';\n forecast_results = filter forecasts_results by {{row(Date_Filter_1.result, [0], [\"Min\",\"Max\"]).asDateRange(\"date('StartDate_Year','StartDate_Month','StartDate_Day')\")}};\n forecast_results = group forecast_results by ('Account.Name', 'StartDate_Year~~~StartDate_Month');\n forecast_results = foreach forecast_results generate 'Account.Name' as 'Account.Name', 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', first('StartDate_Year') as 'StartDate_Year', first('StartDate_Month') as 'StartDate_Month', sum('Amount') as 'Amount', sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity', sum('Amount_before_adj') as 'Amount_before_adj', sum(sum('Amount_before_adj')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount_before_adj', sum('Quantity_before_adj') as 'Quantity_before_adj', sum(sum('Quantity_before_adj')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity_before_adj';\n forecast_results = foreach forecast_results generate 'Account.Name' as 'Account.Name', 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'Amount' as 'Amount', 'cumm_Amount' as 'cumm_Amount', 'Quantity' as 'Quantity', 'cumm_Quantity' as 'cumm_Quantity', 'Amount_before_adj' as 'Amount_before_adj', 'cumm_Amount_before_adj' as 'cumm_Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj', 'cumm_Quantity_before_adj' as 'cumm_Quantity_before_adj';\n forecast_results = order forecast_results by 'StartDate_Year~~~StartDate_Month' asc;\n\n  orders = load \"${App.Datasets.MFG_Order_Product.FullyQualifiedName}\";\n orders = filter orders by 'OrderEffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\n orders = filter orders by 'OrderEffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\n orders = group orders by ('OrderAccountName', 'OrderEffectiveDate_Year', 'OrderEffectiveDate_Month');\n order_results = foreach orders generate 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' as 'StartDate_Year~~~StartDate_Month', 'OrderAccountName' as 'Account.Name', sum('TotalPrice') as 'Amount', sum(sum('TotalPrice')) over ([..0] partition by all order by 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' asc) as 'cumm_Quantity';\n order_results = order order_results by 'StartDate_Year~~~StartDate_Month' asc;\n\n  result = cogroup order_results by ('Account.Name', 'StartDate_Year~~~StartDate_Month') full, forecast_results by ('Account.Name', 'StartDate_Year~~~StartDate_Month');\n result = foreach result generate coalesce(forecast_results.'StartDate_Year~~~StartDate_Month', order_results.'StartDate_Year~~~StartDate_Month') as 'StartDate_Year~~~StartDate_Month',  coalesce(forecast_results.'Account.Name', order_results.'Account.Name') as 'Account.Name', coalesce(sum(order_results.'Amount'),0) as 'Actuals', coalesce(sum(forecast_results.'Amount'),0) as 'Forecast', coalesce(sum(forecast_results.'Amount_before_adj'),0) as 'Forecast_before_adj', coalesce(sum(order_results.'Quantity'),0) as 'ActualQuantity', coalesce(sum(forecast_results.'Quantity'),0) as 'ForecastQuantity', coalesce(sum(forecast_results.'Quantity_before_adj'),0) as 'ForecastQuantity_before_adj';\n  result = group result by ('Account.Name', 'StartDate_Year~~~StartDate_Month');\n result = foreach result generate 'Account.Name' as 'Account.Name', 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('Actuals') as 'Actuals', sum('Forecast') as 'Forecast', sum('Actuals')-sum('Forecast') as 'ForecastAmountGap', (case when sum('Actuals')==0 then null else abs(sum('Actuals')-sum('Forecast'))/sum('Actuals') end) as 'amount_mape', sum('Actuals')-sum('Forecast_before_adj') as 'ForecastAmountGap_before_adj', (case when sum('Actuals')==0 then null else abs(sum('Actuals')-sum('Forecast_before_adj'))/sum('Actuals') end) as 'amount_mape_before_adj', (case when sum('Actuals')==0 then 0 else 1 end) as 'amount_mape_eligible', (case when sum('ActualQuantity')==0 then null else abs(sum('ActualQuantity')-sum('ForecastQuantity'))/sum('ActualQuantity') end) as 'quantity_mape', (case when sum('ActualQuantity')==0 then 0 else 1 end) as 'quantity_mape_eligible', sum('ActualQuantity')-sum('ForecastQuantity') as 'ForecastQuantityGap', (case when sum('ActualQuantity')==0 then null else abs(sum('ActualQuantity')-sum('ForecastQuantity_before_adj'))/sum('ActualQuantity') end) as 'quantity_mape_before_adj', sum('ActualQuantity')-sum('ForecastQuantity_before_adj') as 'ForecastQuantityGap_before_adj';\n result = group result by 'StartDate_Year~~~StartDate_Month';\n result = foreach result generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('amount_mape')*100/sum('amount_mape_eligible') as 'amount_mape', sum('quantity_mape')*100/sum('quantity_mape_eligible') as 'quantity_mape', sum('ForecastAmountGap') as 'ForecastAmountGap', sum('ForecastQuantityGap') as 'ForecastQuantityGap', sum('amount_mape_before_adj')*100/sum('amount_mape_eligible') as 'amount_mape_before_adj', sum('quantity_mape_before_adj')*100/sum('quantity_mape_eligible') as 'quantity_mape_before_adj', sum('ForecastAmountGap_before_adj') as 'ForecastAmountGap_before_adj', sum('ForecastQuantityGap_before_adj') as 'ForecastQuantityGap_before_adj', sum(sum('amount_mape')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month')*100/sum(coalesce(sum('amount_mape_eligible'),0)) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month') as 'amount_mape_cumulative';\n result = foreach result generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'amount_mape' as 'amount_mape', 'amount_mape_before_adj' as 'amount_mape_before_adj', 'amount_mape_cumulative' as 'amount_mape_cumulative';\n ",
        "receiveFacetSource" : {
          "mode" : "all",
          "steps" : [ ]
        },
        "selectMode" : "none",
        "start" : [ ],
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : false,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "stack" : false,
            "showPoints" : true,
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "bottom-center",
              "inside" : false
            },
            "axisMode" : "sync",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "time-combo",
            "missingValue" : "connect",
            "showValuesOnLine" : false,
            "timeAxis" : {
              "showTitle" : true,
              "showAxis" : true,
              "referenceLines" : [ ],
              "title" : "Time (Year>Month)"
            },
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "left",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "plots" : {
              "cumm_Amount" : {
                "mark" : "line"
              },
              "cumm_Amount_low_95" : {
                "mark" : "line"
              },
              "Amount" : {
                "mark" : "bar"
              },
              "cumm_Planned_Revenue" : {
                "mark" : "line"
              },
              "cumm_Amount_high_95" : {
                "mark" : "line"
              }
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "Amount",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Date_Filter_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Date_Filter",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_Demo_Data.FullyQualifiedName}\";\nq = foreach q generate \"1970\" as 'Date_Year', \"01\" as 'Date_Month', \"01\" as 'Date_Day';\nq = group q by ('Date_Year', 'Date_Month', 'Date_Day');\nq = foreach q generate 'Date_Year', 'Date_Month', 'Date_Day', count() as 'sum';\n-- use fill() to generate null rows for any missing dates. Then you can use timeseries().\nq = fill q by (dateCols=('Date_Year','Date_Month','Date_Day', \"Y-M-D\"));\nq = timeseries q generate 'sum' as 'cnt' with (length=60000,  dateCols=('Date_Year','Date_Month','Date_Day', \"Y-M-D\"));\nq = foreach q generate 'Date_Year' + \"-\" + 'Date_Month' + \"-\" + 'Date_Day'+ \" 00:00:00\" as 'Date','Date_Year', 'Date_Month', 'Date_Day';\nq = filter q by {{row(Date_Selector_1.selection, [0], [\"min\", \"max\"]).asDateRange(\"date('Date_Year', 'Date_Month', 'Date_Day')\")}};\nq = foreach q generate toDate('Date') as 'Date', date_to_epoch(toDate('Date')) as 'Date_sec_epoch';\nq = group q by all;\nq = foreach q generate min('Date') as 'Min Date', toDate(max('Date_sec_epoch')+86399) as 'Max Date', min('Date_sec_epoch')*1000 as 'Min', (max('Date_sec_epoch')+86399)*1000 as 'Max',           date_to_epoch(toDate(number_to_string(string_to_number(date_to_string(toDate(min('Date_sec_epoch')),\"yyyy\"))-1,\"####\")+substr(date_to_string(toDate(min('Date_sec_epoch')),\"yyyy-MM-dd\"),5),\"yyyy-MM-dd\"))*1000 as 'Prev_Min', (date_to_epoch(toDate(number_to_string(string_to_number(date_to_string(toDate(max('Date_sec_epoch')),\"yyyy\"))-1,\"####\")+substr(date_to_string(toDate(max('Date_sec_epoch')),\"yyyy-MM-dd\"),5),\"yyyy-MM-dd\"))+86399)*1000 as 'Prev_Max';",
        "receiveFacetSource" : {
          "mode" : "all",
          "steps" : [ ]
        },
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Overall_Forecast_Cha_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Overall Forecast Change",
        "numbers" : [
          "Forecast_Change_Percent"
        ],
        "query" : "all_slaps_forecast = load \"${App.Datasets.MFG_Demo_Data.FullyQualifiedName}\";\nall_slaps_forecast = filter all_slaps_forecast by 'PeriodStartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\nall_slaps_forecast = filter all_slaps_forecast by 'PeriodEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\nall_slaps_forecast = foreach all_slaps_forecast generate 'IdValidFromToKey' as 'IdValidFromToKey', 'ProductName' as 'AccountProductForecast.Name', 'ProductFamily' as 'Product.Family', 'PeriodStartDate_sec_epoch' as 'StartDate_sec_epoch', 'PeriodEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ValidFrom_sec_epoch' as 'ValidFrom_sec_epoch', 'ValidTo_sec_epoch' as 'ValidTo_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 0 as 'DiscountPercentage', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount';\nStart = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'IdValidFromToKey' as 'IdValidFromToKey', 'StartDate_sec_epoch' as 'Start Date', case when 'ActualEndDate_sec_epoch' < date_to_epoch(now()) then 'ActualEndDate_sec_epoch' else date_to_epoch(now()) end as 'End Date', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000))) then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000) && ({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000)))) && {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nEnd_Value_Forecasted = foreach all_slaps_forecast generate {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'IdValidFromToKey' as 'IdValidFromToKey', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000) then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000),\"MM\") end as 'Date_Month', 'SalesPrice' * ((100-coalesce('DiscountPercentage',0))/100) as 'SalesPrice', case when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))  then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ({{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))) + 86400)) && ('ActualEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000)) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) - 2764800)))))),toDate({{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000))) * 'ForecastedDailyAmount' else 0 end as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nDataForFill_Forecasted = union Start, End_Value_Forecasted;\nDataForFill_Forecasted = foreach DataForFill_Forecasted generate 'IdValidFromToKey' as 'IdValidFromToKey', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date', 'SalesPrice' as 'SalesPrice', 'Forecasted Amount' as 'Forecasted Amount', 'ForecastedDailyAmount' as 'ForecastedDailyAmount';\nFilledData_Forecasted = fill DataForFill_Forecasted by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='IdValidFromToKey');\nFilledData_Forecasted = group FilledData_Forecasted by ('IdValidFromToKey', 'Date_Year', 'Date_Month');\nFilledData_Forecasted = foreach FilledData_Forecasted generate 'IdValidFromToKey', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date', first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'IdValidFromToKey' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'IdValidFromToKey' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'IdValidFromToKey' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'IdValidFromToKey' ) as 'End Date', sum('Forecasted Amount') as 'Forecasted Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'IdValidFromToKey' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', min(first('SalesPrice'))over ([..0] partition by 'IdValidFromToKey' order by ('Date_Year','Date_Month')) as 'SalesPrice';\nFilledData_Forecasted = filter FilledData_Forecasted by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\nFilledData = foreach FilledData_Forecasted generate 'IdValidFromToKey', 'Date_Year', 'Date_Month', 'SalesPrice' as 'SalesPrice', (case when 'Forecasted Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Forecasted Amount' end) as 'Forecasted Amount';\nFilledData = foreach FilledData generate 'IdValidFromToKey', 'Date_Year', 'Date_Month', 'SalesPrice' as 'SalesPrice', 'Forecasted Amount' as 'Forecasted Amount', case when 'SalesPrice' is null then 0 else 'Forecasted Amount'/'SalesPrice' end as 'Forecasted Quantity';\nFilledData = foreach FilledData generate 'IdValidFromToKey', 'Date_Year', 'Date_Month', 'Forecasted Amount' as 'Forecasted Amount', case when 'SalesPrice' is null then 0 else 'Forecasted Amount'/'SalesPrice' end as 'Forecasted Quantity';\nresult = group FilledData by 'IdValidFromToKey' left, all_slaps_forecast by 'IdValidFromToKey';\nresult = foreach result generate  FilledData.'IdValidFromToKey' as 'IdValidFromToKey', \n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,\"Cur_Max_Date_sec_epoch\"),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,\"Cur_Max_Date_sec_epoch\"),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then sum(FilledData.'Forecasted Amount') end as 'Cur_Max_ForecastedMeasure', \n    case when {{coalesce(cell(Min_and_max_dates_1.result,0,cell(static_1.selection, 0, \"Min_Date\")),0).asObject()}} > first(all_slaps_forecast.ValidFrom_sec_epoch) and {{coalesce(cell(Min_and_max_dates_1.result,0,cell(static_1.selection, 0, \"Min_Date\")),0).asObject()}} < first(all_slaps_forecast.ValidTo_sec_epoch) then sum(FilledData.'Forecasted Amount') end as 'Cur_Min_ForecastedMeasure';\nresult = group result by all;\nresult = foreach result generate (sum('Cur_Max_ForecastedMeasure') - sum('Cur_Min_ForecastedMeasure'))/sum('Cur_Min_ForecastedMeasure') as 'Forecast_Change_Percent';\nresult = order result by 'Forecast_Change_Percent' desc nulls last;",
        "receiveFacetSource" : {
          "mode" : "all",
          "steps" : [ ]
        },
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Account_Name_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Account_Name_Filter",
        "numbers" : [ ],
        "query" : "forecasts = load \"${App.Datasets.MFG_Demo_Data.FullyQualifiedName}\";\norders = load \"${App.Datasets.MFG_Order_Product.FullyQualifiedName}\";\nresult = cogroup orders by 'OrderAccountName' full, forecasts by 'AccountName';\nresult = foreach result generate coalesce(forecasts.'AccountName', orders.'OrderAccountName') as 'AccountName';\nresult = order result by 'AccountName' asc;",
        "receiveFacetSource" : {
          "mode" : "all",
          "steps" : [ ]
        },
        "selectMode" : "multi",
        "start" : [ ],
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "MAPE_by_Prod_1" : {
        "broadcastFacet" : false,
        "groups" : [ ],
        "label" : "MAPE by Prod",
        "numbers" : [ ],
        "query" : "forecasts = load \"${App.Datasets.MFG_Demo_Data.FullyQualifiedName}\";\n forecasts = filter forecasts by 'PeriodStartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\n forecasts = filter forecasts by 'PeriodEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\n forecasts = foreach forecasts generate  {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'AccountProductPeriodForecastId' as 'Id', 'ProductName' as 'AccountProductForecast.Name', 'AccountName' as 'Account.Name', 'ProductFamily' as 'Product.Family', 'PeriodStartDate_sec_epoch' as 'StartDate_sec_epoch', 'PeriodEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount', 'Forecast' as 'ForecastedRevenue', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedQuantity' as 'ForecastedQuantity';\n Start = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'Account.Name' as 'Account.Name', 'AccountProductForecast.Name' as 'AccountProductForecast.Name', 'Product.Family' as 'Product.Family', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month',                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Amount'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantity' else 'ForecastedQuantityFinal' end as 'Quantity'                ,                   case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyRevenueBAdj' else 'ForecastedRevenue' end as 'Amount_before_adj'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantityBAdj' else 'ForecastedQuantity' end as 'Quantity_before_adj'                , 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\n End_Value = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'Account.Name' as 'Account.Name', 'AccountProductForecast.Name' as 'AccountProductForecast.Name', 'Product.Family' as 'Product.Family', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyAmount' \n    else 0 end as 'Amount', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantity' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantity' \n    else 0 end as 'Quantity', case     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyRevenueBAdj'     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyRevenueBAdj'     else 0 end as 'Amount_before_adj', case     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantityBAdj'    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantityBAdj'     else 0 end as 'Quantity_before_adj', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\n DataForFill = union Start, End_Value;\n DataForFill = foreach DataForFill generate 'Id' as 'Id', 'Account.Name' as 'Account.Name', 'AccountProductForecast.Name' as 'AccountProductForecast.Name', 'Product.Family' as 'Product.Family', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','Amount' as 'Amount', 'Quantity' as 'Quantity','Amount_before_adj' as 'Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\n FilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\n FilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\n FilledData = foreach FilledData generate 'Id', first('Account.Name') as 'Account.Name', first('AccountProductForecast.Name') as 'AccountProductForecast.Name', first('Product.Family') as 'Product.Family', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Amount') as 'Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', sum('Quantity') as 'Quantity', min(first('ForecastedDailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantity', sum('Amount_before_adj') as 'Amount_before_adj', min(first('ForecastedDailyRevenueBAdj'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyRevenueBAdj', sum('Quantity_before_adj') as 'Quantity_before_adj', min(first('ForecastedDailyQuantityBAdj'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantityBAdj';\n FilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\n FilledData = foreach FilledData generate 'Id', 'Account.Name' as 'Account.Name', 'AccountProductForecast.Name' as 'AccountProductForecast.Name', 'Product.Family' as 'Product.Family', 'Date_Year', 'Date_Month', case when 'Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Amount' end as 'Amount', case when 'Quantity' is null then month_days(toDate('Date'))*'ForecastedDailyQuantity' else 'Quantity' end as 'Quantity', case when 'Amount_before_adj' is null then month_days(toDate('Date'))*'ForecastedDailyRevenueBAdj' else 'Amount_before_adj' end as 'Amount_before_adj', case when 'Quantity_before_adj' is null then month_days(toDate('Date'))*'ForecastedDailyQuantityBAdj' else 'Quantity_before_adj' end as 'Quantity_before_adj';\n forecasts_results = group FilledData by ('AccountProductForecast.Name', 'Account.Name', 'Date_Year', 'Date_Month');\n forecasts_results = foreach forecasts_results generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', \"01\" as 'StartDate_Day', 'Date_Month' as 'StartDate_Month', 'Account.Name' as 'Account.Name', 'AccountProductForecast.Name' as 'AccountProductForecast.Name', first('Product.Family') as 'Product.Family', sum('Amount') as 'Amount', sum('Quantity') as 'Quantity', sum('Amount_before_adj') as 'Amount_before_adj', sum('Quantity_before_adj') as 'Quantity_before_adj';\n forecasts_results = foreach forecasts_results generate 'StartDate_Year' + \"~~~\" + 'StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'StartDate_Year' as 'StartDate_Year', 'StartDate_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', 'Account.Name' as 'Account.Name', 'AccountProductForecast.Name' as 'AccountProductForecast.Name', 'Product.Family' as 'Product.Family', 'Amount' as 'Amount', 'Quantity' as 'Quantity', 'Amount_before_adj' as 'Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj';\n forecast_results = filter forecasts_results by {{row(Date_Filter_1.result, [0], [\"Min\",\"Max\"]).asDateRange(\"date('StartDate_Year','StartDate_Month','StartDate_Day')\")}};\n forecast_results = group forecast_results by ('Account.Name', 'AccountProductForecast.Name', 'StartDate_Year~~~StartDate_Month');\n forecast_results = foreach forecast_results generate 'Account.Name' as 'Account.Name', 'AccountProductForecast.Name' as 'AccountProductForecast.Name', first('Product.Family') as 'Product.Family', 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', first('StartDate_Year') as 'StartDate_Year', first('StartDate_Month') as 'StartDate_Month', sum('Amount') as 'Amount', sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity', sum('Amount_before_adj') as 'Amount_before_adj', sum(sum('Amount_before_adj')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount_before_adj', sum('Quantity_before_adj') as 'Quantity_before_adj', sum(sum('Quantity_before_adj')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity_before_adj';\n forecast_results = foreach forecast_results generate 'Account.Name' as 'Account.Name', 'AccountProductForecast.Name' as 'AccountProductForecast.Name', 'Product.Family' as 'Product.Family', 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'Amount' as 'Amount', 'cumm_Amount' as 'cumm_Amount', 'Quantity' as 'Quantity', 'cumm_Quantity' as 'cumm_Quantity', 'Amount_before_adj' as 'Amount_before_adj', 'cumm_Amount_before_adj' as 'cumm_Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj', 'cumm_Quantity_before_adj' as 'cumm_Quantity_before_adj';\n forecast_results = order forecast_results by 'StartDate_Year~~~StartDate_Month' asc;\n\n  orders = load \"${App.Datasets.MFG_Order_Product.FullyQualifiedName}\";\n orders = filter orders by 'OrderEffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\n orders = filter orders by 'OrderEffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\n orders = group orders by ('OrderAccountName', 'ProductName', 'OrderEffectiveDate_Year', 'OrderEffectiveDate_Month');\n order_results = foreach orders generate 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' as 'StartDate_Year~~~StartDate_Month', 'OrderAccountName' as 'Account.Name', 'ProductName' as 'Product.Name', first('ProductFamily') as 'Product.Family', sum('TotalPrice') as 'Amount', sum(sum('TotalPrice')) over ([..0] partition by all order by 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' asc) as 'cumm_Quantity';\n order_results = order order_results by 'StartDate_Year~~~StartDate_Month' asc;\n\n  result = cogroup order_results by ('Account.Name', 'Product.Name', 'StartDate_Year~~~StartDate_Month') full, forecast_results by ('Account.Name', 'AccountProductForecast.Name', 'StartDate_Year~~~StartDate_Month');\n result = foreach result generate coalesce(forecast_results.'StartDate_Year~~~StartDate_Month', order_results.'StartDate_Year~~~StartDate_Month') as 'StartDate_Year~~~StartDate_Month',  coalesce(forecast_results.'Account.Name', order_results.'Account.Name') as 'Account.Name',  coalesce(forecast_results.'AccountProductForecast.Name', order_results.'Product.Name') as 'Product.Name',  coalesce(first(forecast_results.'Product.Family'), first(order_results.'Product.Family')) as 'Product.Family', coalesce(sum(order_results.'Amount'),0) as 'Actuals', coalesce(sum(forecast_results.'Amount'),0) as 'Forecast', coalesce(sum(forecast_results.'Amount_before_adj'),0) as 'Forecast_before_adj', coalesce(sum(order_results.'Quantity'),0) as 'ActualQuantity', coalesce(sum(forecast_results.'Quantity'),0) as 'ForecastQuantity', coalesce(sum(forecast_results.'Quantity_before_adj'),0) as 'ForecastQuantity_before_adj';\n  result = group result by ('Account.Name', 'Product.Name', 'StartDate_Year~~~StartDate_Month');\n result = foreach result generate 'Account.Name' as 'Account.Name', 'Product.Name' as 'Product.Name', first('Product.Family') as 'Product.Family', 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('Actuals') as 'Actuals', sum('Forecast') as 'Forecast', sum('Actuals')-sum('Forecast') as 'ForecastAmountGap', (case when sum('Actuals')==0 then null else abs(sum('Actuals')-sum('Forecast'))/sum('Actuals') end) as 'amount_mape', sum('Actuals')-sum('Forecast_before_adj') as 'ForecastAmountGap_before_adj', (case when sum('Actuals')==0 then null else abs(sum('Actuals')-sum('Forecast_before_adj'))/sum('Actuals') end) as 'amount_mape_before_adj', (case when sum('Actuals')==0 then 0 else 1 end) as 'amount_mape_eligibile', (case when sum('ActualQuantity')==0 then null else abs(sum('ActualQuantity')-sum('ForecastQuantity'))/sum('ActualQuantity') end) as 'quantity_mape', (case when sum('ActualQuantity')==0 then 0 else 1 end) as 'quantity_mape_eligibile', sum('ActualQuantity')-sum('ForecastQuantity') as 'ForecastQuantityGap', (case when sum('ActualQuantity')==0 then null else abs(sum('ActualQuantity')-sum('ForecastQuantity_before_adj'))/sum('ActualQuantity') end) as 'quantity_mape_before_adj', sum('ActualQuantity')-sum('ForecastQuantity_before_adj') as 'ForecastQuantityGap_before_adj';\n result = group result by ('Account.Name', 'Product.Name');\n result = foreach result generate 'Account.Name', 'Product.Name', first('Product.Family') as 'Product.Family', {{cell(Qty_vs_Amount_1.selection, 0, \"details_table_projection\").asObject()}};\n ",
        "receiveFacetSource" : {
          "mode" : "all",
          "steps" : [ ]
        },
        "selectMode" : "none",
        "start" : [ ],
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : false,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "stack" : false,
            "showPoints" : true,
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "bottom-center",
              "inside" : false
            },
            "axisMode" : "sync",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "time-combo",
            "missingValue" : "connect",
            "showValuesOnLine" : false,
            "timeAxis" : {
              "showTitle" : true,
              "showAxis" : true,
              "referenceLines" : [ ],
              "title" : "Time (Year>Month)"
            },
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "left",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "plots" : {
              "cumm_Amount" : {
                "mark" : "line"
              },
              "cumm_Amount_low_95" : {
                "mark" : "line"
              },
              "Amount" : {
                "mark" : "bar"
              },
              "cumm_Planned_Revenue" : {
                "mark" : "line"
              },
              "cumm_Amount_high_95" : {
                "mark" : "line"
              }
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "Amount",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Account_Parent_1" : {
        "broadcastFacet" : true,
        "datasets" : [
          {
            "name" : "${App.Datasets.MFG_Demo_Data.Name}"
          }
        ],
        "isGlobal" : false,
        "query" : {
          "query" : {
            "measures" : [
              [
                "count",
                "*"
              ]
            ],
            "groups" : [
              "ParentName"
            ]
          },
          "version" : -1.0
        },
        "receiveFacetSource" : {
          "mode" : "all",
          "steps" : [ ]
        },
        "selectMode" : "single",
        "start" : [ ],
        "type" : "aggregateflex",
        "useGlobal" : true,
        "visualizationParameters" : { }
      },
      "Prod_vs_Prod_Family_1" : {
        "broadcastFacet" : false,
        "columns" : {
          "Display" : {
            "type" : "string"
          }
        },
        "label" : "Prod vs Prod Family",
        "selectMode" : "singlerequired",
        "start" : {
          "display" : [
            "PRODUCT"
          ]
        },
        "type" : "staticflex",
        "values" : [
          {
            "display" : "PRODUCT",
            "keyword" : "Products",
            "grouping" : "Product.Name",
            "agreements_col" : "SalesAgreementProduct.Name",
            "forecasts_col" : "ProductName",
            "orders_col" : "Product.Name",
            "opportunities_col" : "Product.Name"
          },
          {
            "display" : "PRODUCT FAMILY",
            "keyword" : "Product Families",
            "grouping" : "Product.Family",
            "agreements_col" : "SalesAgreementProduct.Product.Family",
            "forecasts_col" : "ProductFamily",
            "orders_col" : "Product.Family",
            "opportunities_col" : "Product.Family"
          }
        ]
      },
      "measure_selector_for_1" : {
        "broadcastFacet" : false,
        "columns" : {
          "Display" : {
            "type" : "string"
          }
        },
        "label" : "measure_selector_for_mape",
        "selectMode" : "singlerequired",
        "start" : {
          "Display" : [
            "MAPE"
          ]
        },
        "type" : "staticflex",
        "values" : [
          {
            "Display" : "MAPE (ADJUSTED)",
            "measure_amount" : "amount_mape",
            "measure_quantity" : "quantity_mape"
          },
          {
            "Display" : "MAPE",
            "measure_amount" : "amount_mape_before_adj",
            "measure_quantity" : "quantity_mape_before_adj"
          },
          {
            "Display" : "ACTUALS VS FORECAST (ADJUSTED)",
            "measure_amount" : "ForecastAmountGap",
            "measure_quantity" : "ForecastQuantityGap"
          },
          {
            "Display" : "ACTUALS VS FORECAST",
            "measure_amount" : "ForecastAmountGap_before_adj",
            "measure_quantity" : "ForecastQuantityGap_before_adj"
          }
        ]
      },
      "static_1" : {
        "broadcastFacet" : true,
        "columns" : {
          "Min_Date" : {
            "type" : "string"
          },
          "Measure" : {
            "type" : "string"
          },
          "Period_Range" : {
            "type" : "string"
          },
          "Number_of_Months" : {
            "type" : "number"
          },
          "Period_Display" : {
            "type" : "string"
          }
        },
        "label" : "History Period Display",
        "selectMode" : "singlerequired",
        "start" : {
          "Period_Display" : [
            "Last 3 Months"
          ]
        },
        "type" : "staticflex",
        "values" : [
          {
            "Period_Display" : "Last 3 Months",
            "Measure" : "case when sum(Cum_Cur_Min_ForecastedMeasure) == 0 then 100 else (sum(Cur_Max_ForecastedMeasure) - sum(Cum_Cur_Min_ForecastedMeasure))/sum(Cum_Cur_Min_ForecastedMeasure) end as Cum_Cur_Forecast_Percent,case when sum(Cur_Min_ForecastedMeasure) == 0 then 100 else (sum(Cur_Max_ForecastedMeasure) - sum(Cur_Min_ForecastedMeasure))/sum(Cur_Min_ForecastedMeasure) end as Cur_Forecast_Percent,case when sum(First_Min_ForecastedMeasure) == 0 then 100 else (sum(First_Max_ForecastedMeasure) - sum(First_Min_ForecastedMeasure))/sum(First_Min_ForecastedMeasure) end as First_Forecast_Percent,case when sum(Second_Min_ForecastedMeasure) == 0 then 100 else (sum(Second_Max_ForecastedMeasure) - sum(Second_Min_ForecastedMeasure))/sum(Second_Min_ForecastedMeasure) end as Second_Forecast_Percent,case when sum(Third_Min_ForecastedMeasure) == 0 then 100 else (sum(Third_Max_ForecastedMeasure) - sum(Third_Min_ForecastedMeasure))/sum(Third_Min_ForecastedMeasure) end as Third_Forecast_Percent",
            "Min_Date" : "Third_Min_Date_sec_epoch",
            "Period_Range" : "Cur_3_Month_Range",
            "Number_of_Months" : 3
          },
          {
            "Period_Display" : "Last 6 Months",
            "Measure" : "case when sum(Cum_Cur_Min_ForecastedMeasure) == 0 then 100 else (sum(Cur_Max_ForecastedMeasure) - sum(Cum_Cur_Min_ForecastedMeasure))/sum(Cum_Cur_Min_ForecastedMeasure) end as Cum_Cur_Forecast_Percent,case when sum(Cur_Min_ForecastedMeasure) == 0 then 100 else (sum(Cur_Max_ForecastedMeasure) - sum(Cur_Min_ForecastedMeasure))/sum(Cur_Min_ForecastedMeasure) end as Cur_Forecast_Percent,case when sum(First_Min_ForecastedMeasure) == 0 then 100 else (sum(First_Max_ForecastedMeasure) - sum(First_Min_ForecastedMeasure))/sum(First_Min_ForecastedMeasure) end as First_Forecast_Percent,case when sum(Second_Min_ForecastedMeasure) == 0 then 100 else (sum(Second_Max_ForecastedMeasure) - sum(Second_Min_ForecastedMeasure))/sum(Second_Min_ForecastedMeasure) end as Second_Forecast_Percent,case when sum(Third_Min_ForecastedMeasure) == 0 then 100 else (sum(Third_Max_ForecastedMeasure) - sum(Third_Min_ForecastedMeasure))/sum(Third_Min_ForecastedMeasure) end as Third_Forecast_Percent,case when sum(Fourth_Min_ForecastedMeasure) == 0 then 100 else (sum(Fourth_Max_ForecastedMeasure) - sum(Fourth_Min_ForecastedMeasure))/sum(Fourth_Min_ForecastedMeasure) end as Fourth_Forecast_Percent,case when sum(Fifth_Min_ForecastedMeasure) == 0 then 100 else (sum(Fifth_Max_ForecastedMeasure) - sum(Fifth_Min_ForecastedMeasure))/sum(Fifth_Min_ForecastedMeasure) end as Fifth_Forecast_Percent,case when sum(Sixth_Min_ForecastedMeasure) == 0 then 100 else (sum(Sixth_Max_ForecastedMeasure) - sum(Sixth_Min_ForecastedMeasure))/sum(Sixth_Min_ForecastedMeasure) end as Sixth_Forecast_Percent",
            "Min_Date" : "Sixth_Min_Date_sec_epoch",
            "Period_Range" : "Cur_6_Month_Range",
            "Number_of_Months" : 6
          },
          {
            "Period_Display" : "Last 12 Months",
            "Measure" : "case when sum(Cum_Cur_Min_ForecastedMeasure) == 0 then 100 else (sum(Cur_Max_ForecastedMeasure) - sum(Cum_Cur_Min_ForecastedMeasure))/sum(Cum_Cur_Min_ForecastedMeasure) end as Cum_Cur_Forecast_Percent,case when sum(Cur_Min_ForecastedMeasure) == 0 then 100 else (sum(Cur_Max_ForecastedMeasure) - sum(Cur_Min_ForecastedMeasure))/sum(Cur_Min_ForecastedMeasure) end as Cur_Forecast_Percent,case when sum(First_Min_ForecastedMeasure) == 0 then 100 else (sum(First_Max_ForecastedMeasure) - sum(First_Min_ForecastedMeasure))/sum(First_Min_ForecastedMeasure) end as First_Forecast_Percent,case when sum(Second_Min_ForecastedMeasure) == 0 then 100 else (sum(Second_Max_ForecastedMeasure) - sum(Second_Min_ForecastedMeasure))/sum(Second_Min_ForecastedMeasure) end as Second_Forecast_Percent,case when sum(Third_Min_ForecastedMeasure) == 0 then 100 else (sum(Third_Max_ForecastedMeasure) - sum(Third_Min_ForecastedMeasure))/sum(Third_Min_ForecastedMeasure) end as Third_Forecast_Percent,case when sum(Fourth_Min_ForecastedMeasure) == 0 then 100 else (sum(Fourth_Max_ForecastedMeasure) - sum(Fourth_Min_ForecastedMeasure))/sum(Fourth_Min_ForecastedMeasure) end as Fourth_Forecast_Percent,case when sum(Fifth_Min_ForecastedMeasure) == 0 then 100 else (sum(Fifth_Max_ForecastedMeasure) - sum(Fifth_Min_ForecastedMeasure))/sum(Fifth_Min_ForecastedMeasure) end as Fifth_Forecast_Percent,case when sum(Sixth_Min_ForecastedMeasure) == 0 then 100 else (sum(Sixth_Max_ForecastedMeasure) - sum(Sixth_Min_ForecastedMeasure))/sum(Sixth_Min_ForecastedMeasure) end as Sixth_Forecast_Percent,case when sum(Seventh_Min_ForecastedMeasure) == 0 then 100 else (sum(Seventh_Max_ForecastedMeasure) - sum(Seventh_Min_ForecastedMeasure))/sum(Seventh_Min_ForecastedMeasure) end as Seventh_Forecast_Percent,case when sum(Eighth_Min_ForecastedMeasure) == 0 then 100 else (sum(Eighth_Max_ForecastedMeasure) - sum(Eighth_Min_ForecastedMeasure))/sum(Eighth_Min_ForecastedMeasure) end as Eighth_Forecast_Percent,case when sum(Ninth_Min_ForecastedMeasure) == 0 then 100 else (sum(Ninth_Max_ForecastedMeasure) - sum(Ninth_Min_ForecastedMeasure))/sum(Ninth_Min_ForecastedMeasure) end as Ninth_Forecast_Percent,case when sum(Tenth_Min_ForecastedMeasure) == 0 then 100 else (sum(Tenth_Max_ForecastedMeasure) - sum(Tenth_Min_ForecastedMeasure))/sum(Tenth_Min_ForecastedMeasure) end as Tenth_Forecast_Percent,case when sum(Eleventh_Min_ForecastedMeasure) == 0 then 100 else (sum(Eleventh_Max_ForecastedMeasure) - sum(Eleventh_Min_ForecastedMeasure))/sum(Eleventh_Min_ForecastedMeasure) end as Eleventh_Forecast_Percent,case when sum(Twelfth_Min_ForecastedMeasure) == 0 then 100 else (sum(Twelfth_Max_ForecastedMeasure) - sum(Twelfth_Min_ForecastedMeasure))/sum(Twelfth_Min_ForecastedMeasure) end as Twelfth_Forecast_Percent",
            "Min_Date" : "Twelfth_Min_Date_sec_epoch",
            "Period_Range" : "Cur_12_Month_Range",
            "Number_of_Months" : 12
          }
        ]
      },
      "measure_selector_for_2" : {
        "broadcastFacet" : false,
        "columns" : {
          "Display" : {
            "type" : "string"
          }
        },
        "label" : "measure_selector_for_mape",
        "selectMode" : "singlerequired",
        "start" : {
          "Display" : [
            "MAPE"
          ]
        },
        "type" : "staticflex",
        "values" : [
          {
            "Display" : "MAPE (ADJUSTED)",
            "measure_amount" : "amount_mape",
            "measure_quantity" : "quantity_mape"
          },
          {
            "Display" : "MAPE",
            "measure_amount" : "amount_mape_before_adj",
            "measure_quantity" : "quantity_mape_before_adj"
          },
          {
            "Display" : "ACTUALS VS FORECAST (ADJUSTED)",
            "measure_amount" : "ForecastAmountGap",
            "measure_quantity" : "ForecastQuantityGap"
          },
          {
            "Display" : "ACTUALS VS FORECAST",
            "measure_amount" : "ForecastAmountGap_before_adj",
            "measure_quantity" : "ForecastQuantityGap_before_adj"
          }
        ]
      },
      "AccountProductForeca_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Product_Name_Filter",
        "numbers" : [ ],
        "query" : "forecasts = load \"${App.Datasets.MFG_Demo_Data.FullyQualifiedName}\";\norders = load \"${App.Datasets.MFG_Order_Product.FullyQualifiedName}\";\nresult = cogroup orders by 'ProductName' full, forecasts by 'ProductName';\nresult = foreach result generate coalesce(forecasts.'ProductName', orders.'ProductName') as 'ProductName';\nresult = order result by 'ProductName' asc;",
        "receiveFacetSource" : {
          "mode" : "all",
          "steps" : [ ]
        },
        "selectMode" : "multi",
        "start" : [ ],
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "mape_KPI" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "MAPE KPI",
        "numbers" : [ ],
        "query" : "forecasts = load \"${App.Datasets.MFG_Demo_Data.FullyQualifiedName}\";\n forecasts = filter forecasts by 'PeriodStartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\n forecasts = filter forecasts by 'PeriodEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\n forecasts = foreach forecasts generate  {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'AccountProductPeriodForecastId' as 'Id', 'PeriodStartDate_sec_epoch' as 'StartDate_sec_epoch', 'PeriodEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount', 'Forecast' as 'ForecastedRevenue', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedQuantity' as 'ForecastedQuantity';\n Start = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month',                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Amount'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantity' else 'ForecastedQuantityFinal' end as 'Quantity'                ,                   case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyRevenueBAdj' else 'ForecastedRevenue' end as 'Amount_before_adj'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantityBAdj' else 'ForecastedQuantity' end as 'Quantity_before_adj'                , 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\n End_Value = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyAmount' \n    else 0 end as 'Amount', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantity' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantity' \n    else 0 end as 'Quantity', case     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyRevenueBAdj'     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyRevenueBAdj'     else 0 end as 'Amount_before_adj', case     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantityBAdj'    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantityBAdj'     else 0 end as 'Quantity_before_adj', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\n DataForFill = union Start, End_Value;\n  DataForFill = foreach DataForFill generate 'Id' as 'Id', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','Amount' as 'Amount', 'Quantity' as 'Quantity','Amount_before_adj' as 'Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\n FilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\n FilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Amount') as 'Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', sum('Quantity') as 'Quantity', min(first('ForecastedDailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantity', sum('Amount_before_adj') as 'Amount_before_adj', min(first('ForecastedDailyRevenueBAdj'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyRevenueBAdj', sum('Quantity_before_adj') as 'Quantity_before_adj', min(first('ForecastedDailyQuantityBAdj'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantityBAdj';\n FilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\n FilledData = foreach FilledData generate 'Id', 'Date_Year', 'Date_Month', case when 'Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Amount' end as 'Amount', case when 'Quantity' is null then month_days(toDate('Date'))*'ForecastedDailyQuantity' else 'Quantity' end as 'Quantity', case when 'Amount_before_adj' is null then month_days(toDate('Date'))*'ForecastedDailyRevenueBAdj' else 'Amount_before_adj' end as 'Amount_before_adj', case when 'Quantity_before_adj' is null then month_days(toDate('Date'))*'ForecastedDailyQuantityBAdj' else 'Quantity_before_adj' end as 'Quantity_before_adj';\n forecasts_results = group FilledData by ('Date_Year', 'Date_Month');\n forecasts_results = foreach forecasts_results generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', \"01\" as 'StartDate_Day', 'Date_Month' as 'StartDate_Month', sum('Amount') as 'Amount', sum('Quantity') as 'Quantity', sum('Amount_before_adj') as 'Amount_before_adj', sum('Quantity_before_adj') as 'Quantity_before_adj';\n forecasts_results = foreach forecasts_results generate 'StartDate_Year' + \"~~~\" + 'StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'StartDate_Year' as 'StartDate_Year', 'StartDate_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', 'Amount' as 'Amount', 'Quantity' as 'Quantity', 'Amount_before_adj' as 'Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj';\n forecast_results = filter forecasts_results by {{row(Date_Filter_1.result, [0], [\"Min\",\"Max\"]).asDateRange(\"date('StartDate_Year','StartDate_Month','StartDate_Day')\")}};\n forecast_results = group forecast_results by 'StartDate_Year~~~StartDate_Month';\n forecast_results = foreach forecast_results generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', first('StartDate_Year') as 'StartDate_Year', first('StartDate_Month') as 'StartDate_Month', sum('Amount') as 'Amount', sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity', sum('Amount_before_adj') as 'Amount_before_adj', sum(sum('Amount_before_adj')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount_before_adj', sum('Quantity_before_adj') as 'Quantity_before_adj', sum(sum('Quantity_before_adj')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity_before_adj';\n forecast_results = foreach forecast_results generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'Amount' as 'Amount', 'cumm_Amount' as 'cumm_Amount', 'Quantity' as 'Quantity', 'cumm_Quantity' as 'cumm_Quantity', 'Amount_before_adj' as 'Amount_before_adj', 'cumm_Amount_before_adj' as 'cumm_Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj', 'cumm_Quantity_before_adj' as 'cumm_Quantity_before_adj';\n forecast_results = order forecast_results by 'StartDate_Year~~~StartDate_Month' asc;\n\n  orders = load \"${App.Datasets.MFG_Order_Product.FullyQualifiedName}\";\n orders = filter orders by 'OrderEffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\n orders = filter orders by 'OrderEffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\n orders = group orders by ('OrderEffectiveDate_Year', 'OrderEffectiveDate_Month');\n order_results = foreach orders generate 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('TotalPrice') as 'Amount', sum(sum('TotalPrice')) over ([..0] partition by all order by 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' asc) as 'cumm_Quantity';\n order_results = order order_results by 'StartDate_Year~~~StartDate_Month' asc;\n\n  result = cogroup order_results by 'StartDate_Year~~~StartDate_Month' full, forecast_results by 'StartDate_Year~~~StartDate_Month';\n result = foreach result generate coalesce(forecast_results.'StartDate_Year~~~StartDate_Month', order_results.'StartDate_Year~~~StartDate_Month') as 'StartDate_Year~~~StartDate_Month', coalesce(sum(order_results.'Amount'),0) as 'Actuals', coalesce(sum(forecast_results.'Amount'),0) as 'Forecast', coalesce(sum(order_results.'Quantity'),0) as 'ActualQuantity', coalesce(sum(forecast_results.'Quantity'),0) as 'ForecastQuantity', coalesce(sum(forecast_results.'Amount_before_adj'),0) as 'Forecast_before_adj', coalesce(sum(forecast_results.'Quantity_before_adj'),0) as 'ForecastQuantity_before_adj';\n  result = group result by 'StartDate_Year~~~StartDate_Month';\n result = foreach result generate 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('Actuals') as 'Actuals', sum('Forecast') as 'Forecast', (case when sum('Actuals')==0 then null else abs(sum('Actuals')-sum('Forecast'))/sum('Actuals') end) as 'amount_mape', (case when sum('Actuals')==0 then null else abs(sum('Actuals')-sum('Forecast_before_adj'))/sum('Actuals') end) as 'amount_mape_before_adj', (case when sum('Actuals')==0 then 0 else 1 end) as 'amount_mape_eligibile', (case when sum('ActualQuantity')==0 then null else abs(sum('ActualQuantity')-sum('ForecastQuantity'))/sum('ActualQuantity') end) as 'quantity_mape', (case when sum('ActualQuantity')==0 then null else abs(sum('ActualQuantity')-sum('ForecastQuantity_before_adj'))/sum('ActualQuantity') end) as 'quantity_mape_before_adj', (case when sum('ActualQuantity')==0 then 0 else 1 end) as 'quantity_mape_eligibile';\n result = group result by all;\n result = foreach result generate sum('amount_mape')*100/sum('amount_mape_eligibile') as 'amount_mape', sum('quantity_mape')*100/sum('quantity_mape_eligibile') as 'quantity_mape';\n ",
        "receiveFacetSource" : {
          "mode" : "all",
          "steps" : [ ]
        },
        "selectMode" : "none",
        "start" : [ ],
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : false,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "stack" : false,
            "showPoints" : true,
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "bottom-center",
              "inside" : false
            },
            "axisMode" : "sync",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "time-combo",
            "missingValue" : "connect",
            "showValuesOnLine" : false,
            "timeAxis" : {
              "showTitle" : true,
              "showAxis" : true,
              "referenceLines" : [ ],
              "title" : "Time (Year>Month)"
            },
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "left",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "plots" : {
              "cumm_Amount" : {
                "mark" : "line"
              },
              "cumm_Amount_low_95" : {
                "mark" : "line"
              },
              "Amount" : {
                "mark" : "bar"
              },
              "cumm_Planned_Revenue" : {
                "mark" : "line"
              },
              "cumm_Amount_high_95" : {
                "mark" : "line"
              }
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "Amount",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "Min_and_max_dates_1" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "Min and max dates",
        "numbers" : [ ],
        "query" : "q = load \"${App.Datasets.MFG_Demo_Data.FullyQualifiedName}\";\nq = group q by all;\nq = foreach q generate date_to_epoch(now()) as 'Cur_Max_Date_sec_epoch', \n    date_to_epoch(month_last_day(toDate(date_to_epoch(month_last_day(now()))-2764800)))+86400 as 'Cur_Min_Date_sec_epoch',\n    toString(now(),\"MMM\")  as 'Cur_Month_Name',\n    \"Cumulative\"  as 'Cumulative_Cur_Month_Name',\n    date_to_epoch(month_last_day(toDate(date_to_epoch(month_last_day(now()))-2764800)))+86399 as 'First_Max_Date_sec_epoch', \n    date_to_epoch(month_last_day(toDate(date_to_epoch(month_last_day(now()))-5443200)))+86400 as 'First_Min_Date_sec_epoch',\n    toString(toDate(date_to_epoch(month_last_day(now()))-2764800),\"MMM\")  as First_Month_Name,\n    date_to_epoch(month_last_day(toDate(date_to_epoch(month_last_day(now()))-5443200)))+86399 as 'Second_Max_Date_sec_epoch',\n    date_to_epoch(month_last_day(toDate(date_to_epoch(month_last_day(now()))-8035200)))+86400 as 'Second_Min_Date_sec_epoch',\n    toString(toDate(date_to_epoch(month_last_day(now()))-5443200),\"MMM\")  as Second_Month_Name,\n    date_to_epoch(month_last_day(toDate(date_to_epoch(month_last_day(now()))-8035200)))+86399 as 'Third_Max_Date_sec_epoch', \n    date_to_epoch(month_last_day(toDate(date_to_epoch(month_last_day(now()))-10713600)))+86400 as 'Third_Min_Date_sec_epoch',\n    toString(toDate(date_to_epoch(month_last_day(now()))-8035200),\"MMM\")  as Third_Month_Name,\n    date_to_epoch(month_last_day(toDate(date_to_epoch(month_last_day(now()))-10713600)))+86399 as 'Fourth_Max_Date_sec_epoch',\n    date_to_epoch(month_last_day(toDate(date_to_epoch(month_last_day(now()))-13392000)))+86400 as 'Fourth_Min_Date_sec_epoch',\n    toString(toDate(date_to_epoch(month_last_day(now()))-10713600),\"MMM\")  as Fourth_Month_Name,\n    date_to_epoch(month_last_day(toDate(date_to_epoch(month_last_day(now()))-13392000)))+86399 as 'Fifth_Max_Date_sec_epoch',\n    date_to_epoch(month_last_day(toDate(date_to_epoch(month_last_day(now()))-15984000)))+86400 as 'Fifth_Min_Date_sec_epoch',\n    toString(toDate(date_to_epoch(month_last_day(now()))-13392000),\"MMM\")  as Fifth_Month_Name,\n    date_to_epoch(month_last_day(toDate(date_to_epoch(month_last_day(now()))-15984000)))+86399 as 'Sixth_Max_Date_sec_epoch',\n    date_to_epoch(month_last_day(toDate(date_to_epoch(month_last_day(now()))-18662400)))+86400 as 'Sixth_Min_Date_sec_epoch',\n    toString(toDate(date_to_epoch(month_last_day(now()))-15984000),\"MMM\")  as Sixth_Month_Name,\n    date_to_epoch(month_last_day(toDate(date_to_epoch(month_last_day(now()))-18662400)))+86399 as 'Seventh_Max_Date_sec_epoch',\n    date_to_epoch(month_last_day(toDate(date_to_epoch(month_last_day(now()))-21427200)))+86400 as 'Seventh_Min_Date_sec_epoch',\n    toString(toDate(date_to_epoch(month_last_day(now()))-18662400),\"MMM\")  as Seventh_Month_Name,\n    date_to_epoch(month_last_day(toDate(date_to_epoch(month_last_day(now()))-21427200)))+86399 as 'Eighth_Max_Date_sec_epoch',\n    date_to_epoch(month_last_day(toDate(date_to_epoch(month_last_day(now()))-24019200)))+86400 as 'Eighth_Min_Date_sec_epoch',\n    toString(toDate(date_to_epoch(month_last_day(now()))-21427200),\"MMM\")  as Eighth_Month_Name,\n    date_to_epoch(month_last_day(toDate(date_to_epoch(month_last_day(now()))-24019200)))+86399 as 'Ninth_Max_Date_sec_epoch',\n    date_to_epoch(month_last_day(toDate(date_to_epoch(month_last_day(now()))-26697600)))+86400 as 'Ninth_Min_Date_sec_epoch',\n    toString(toDate(date_to_epoch(month_last_day(now()))-24019200),\"MMM\")  as Ninth_Month_Name,\n    date_to_epoch(month_last_day(toDate(date_to_epoch(month_last_day(now()))-26697600)))+86399 as 'Tenth_Max_Date_sec_epoch',\n    date_to_epoch(month_last_day(toDate(date_to_epoch(month_last_day(now()))-29289600)))+86400 as 'Tenth_Min_Date_sec_epoch',\n    toString(toDate(date_to_epoch(month_last_day(now()))-26697600),\"MMM\")  as Tenth_Month_Name,\n    date_to_epoch(month_last_day(toDate(date_to_epoch(month_last_day(now()))-29289600)))+86399 as 'Eleventh_Max_Date_sec_epoch',\n    date_to_epoch(month_last_day(toDate(date_to_epoch(month_last_day(now()))-31622400)))+86400 as 'Eleventh_Min_Date_sec_epoch',\n    toString(toDate(date_to_epoch(month_last_day(now()))-29289600),\"MMM\")  as Eleventh_Month_Name,\n    date_to_epoch(month_last_day(toDate(date_to_epoch(month_last_day(now()))-31622400)))+86399 as 'Twelfth_Max_Date_sec_epoch',\n    date_to_epoch(month_last_day(toDate(date_to_epoch(month_last_day(now()))-34387200)))+86400 as 'Twelfth_Min_Date_sec_epoch',\n    \"Last \" + toString(toDate(date_to_epoch(month_last_day(now()))-31622400),\"MMM\")  as Twelfth_Month_Name,\n    toString(now(),\"MMM 'yy\") + \" to \" + toString(toDate(date_to_epoch(month_last_day(now()))-8035200),\"MMM 'yy\") as 'Cur_3_Month_Range',\n    toString(now(),\"MMM 'yy\") + \" to \" + toString(toDate(date_to_epoch(month_last_day(now()))-15984000),\"MMM 'yy\") as 'Cur_6_Month_Range',\n    toString(now(),\"MMM 'yy\") + \" to \" + toString(toDate(date_to_epoch(month_last_day(now()))-31622400),\"MMM 'yy\") as 'Cur_12_Month_Range';\nq = foreach q generate Cur_Max_Date_sec_epoch, Cur_Min_Date_sec_epoch, \"'\" + Cumulative_Cur_Month_Name + \"_Percent'\" as Cumulative_Cur_Month_Percent_Name, \"'\" + Cur_Month_Name + \"_Percent'\" as Cur_Month_Percent_Name, \"'\" + Cur_Month_Name + \"_Measure'\" as Cur_Month_Amount_Quantity_Name, First_Max_Date_sec_epoch, First_Min_Date_sec_epoch, \"'\" + First_Month_Name + \"_Percent'\" as First_Month_Percent_Name, \"'\" + First_Month_Name + \"_Measure'\" as First_Month_Amount_Quantity_Name, Second_Max_Date_sec_epoch, Second_Min_Date_sec_epoch, \"'\" + Second_Month_Name + \"_Percent'\" as Second_Month_Percent_Name, \"'\" + Second_Month_Name + \"_Measure'\" as Second_Month_Amount_Quantity_Name, Third_Max_Date_sec_epoch, Third_Min_Date_sec_epoch, \"'\" + Third_Month_Name + \"_Percent'\" as Third_Month_Percent_Name, \"'\" + Third_Month_Name + \"_Measure'\" as Third_Month_Amount_Quantity_Name, Fourth_Max_Date_sec_epoch, Fourth_Min_Date_sec_epoch, \"'\" + Fourth_Month_Name + \"_Percent'\" as Fourth_Month_Percent_Name, \"'\" + Fourth_Month_Name + \"_Measure'\" as Fourth_Month_Amount_Quantity_Name, Fifth_Max_Date_sec_epoch, Fifth_Min_Date_sec_epoch, \"'\" + Fifth_Month_Name + \"_Percent'\" as Fifth_Month_Percent_Name, \"'\" + Fifth_Month_Name + \"_Measure'\" as Fifth_Month_Amount_Quantity_Name, Sixth_Max_Date_sec_epoch, Sixth_Min_Date_sec_epoch, \"'\" + Sixth_Month_Name + \"_Percent'\" as Sixth_Month_Percent_Name, \"'\" + Sixth_Month_Name + \"_Measure'\" as Sixth_Month_Amount_Quantity_Name, Seventh_Max_Date_sec_epoch, Seventh_Min_Date_sec_epoch, \"'\" + Seventh_Month_Name + \"_Percent'\" as Seventh_Month_Percent_Name, \"'\" + Seventh_Month_Name + \"_Measure'\" as Seventh_Month_Amount_Quantity_Name, Eighth_Max_Date_sec_epoch, Eighth_Min_Date_sec_epoch, \"'\" + Eighth_Month_Name + \"_Percent'\" as Eighth_Month_Percent_Name, \"'\" + Eighth_Month_Name + \"_Measure'\" as Eighth_Month_Amount_Quantity_Name, Ninth_Max_Date_sec_epoch, Ninth_Min_Date_sec_epoch, \"'\" + Ninth_Month_Name + \"_Percent'\" as Ninth_Month_Percent_Name, \"'\" + Ninth_Month_Name + \"_Measure'\" as Ninth_Month_Amount_Quantity_Name, Tenth_Max_Date_sec_epoch, Tenth_Min_Date_sec_epoch, \"'\" + Tenth_Month_Name + \"_Percent'\" as Tenth_Month_Percent_Name, \"'\" + Tenth_Month_Name + \"_Measure'\" as Tenth_Month_Amount_Quantity_Name, Eleventh_Max_Date_sec_epoch, Eleventh_Min_Date_sec_epoch, \"'\" + Eleventh_Month_Name + \"_Percent'\" as Eleventh_Month_Percent_Name, \"'\" + Eleventh_Month_Name + \"_Measure'\" as Eleventh_Month_Amount_Quantity_Name, Twelfth_Max_Date_sec_epoch, Twelfth_Min_Date_sec_epoch, \"'\" + Twelfth_Month_Name + \"_Percent'\" as Twelfth_Month_Percent_Name, \"'\" + Twelfth_Month_Name + \"_Measure'\" as Twelfth_Month_Amount_Quantity_Name,\nCur_3_Month_Range, Cur_6_Month_Range, Cur_12_Month_Range;\n q = foreach q generate Cur_Max_Date_sec_epoch, Cur_Min_Date_sec_epoch, Cumulative_Cur_Month_Percent_Name, Cur_Month_Percent_Name, Cur_Month_Amount_Quantity_Name, First_Max_Date_sec_epoch, First_Min_Date_sec_epoch, First_Month_Percent_Name, First_Month_Amount_Quantity_Name, Second_Max_Date_sec_epoch, Second_Min_Date_sec_epoch, Second_Month_Percent_Name, Second_Month_Amount_Quantity_Name, Third_Max_Date_sec_epoch, Third_Min_Date_sec_epoch, Third_Month_Percent_Name, Third_Month_Amount_Quantity_Name, Fourth_Max_Date_sec_epoch, Fourth_Min_Date_sec_epoch, Fourth_Month_Percent_Name, Fourth_Month_Amount_Quantity_Name, Fifth_Max_Date_sec_epoch, Fifth_Min_Date_sec_epoch, Fifth_Month_Percent_Name, Fifth_Month_Amount_Quantity_Name, Sixth_Max_Date_sec_epoch, Sixth_Min_Date_sec_epoch, Sixth_Month_Percent_Name, Sixth_Month_Amount_Quantity_Name, Seventh_Max_Date_sec_epoch, Seventh_Min_Date_sec_epoch, Seventh_Month_Percent_Name, Seventh_Month_Amount_Quantity_Name, Eighth_Max_Date_sec_epoch, Eighth_Min_Date_sec_epoch, Eighth_Month_Percent_Name, Eighth_Month_Amount_Quantity_Name, Ninth_Max_Date_sec_epoch, Ninth_Min_Date_sec_epoch, Ninth_Month_Percent_Name, Ninth_Month_Amount_Quantity_Name, Tenth_Max_Date_sec_epoch, Tenth_Min_Date_sec_epoch, Tenth_Month_Percent_Name, Tenth_Month_Amount_Quantity_Name, Eleventh_Max_Date_sec_epoch, Eleventh_Min_Date_sec_epoch, Eleventh_Month_Percent_Name, Eleventh_Month_Amount_Quantity_Name, Twelfth_Max_Date_sec_epoch, Twelfth_Min_Date_sec_epoch, Twelfth_Month_Percent_Name, Twelfth_Month_Amount_Quantity_Name, Cur_3_Month_Range, Cur_6_Month_Range, Cur_12_Month_Range, Cumulative_Cur_Month_Percent_Name + \", \" + Cur_Month_Percent_Name + \", \" + First_Month_Percent_Name + \", \" + Second_Month_Percent_Name + \", \" + Third_Month_Percent_Name + \", \" + Fourth_Month_Percent_Name + \", \" + Fifth_Month_Percent_Name + \", \" + Sixth_Month_Percent_Name + \", \" + Seventh_Month_Percent_Name + \", \" + Eighth_Month_Percent_Name + \", \" + Ninth_Month_Percent_Name + \", \" + Tenth_Month_Percent_Name + \", \" + Eleventh_Month_Percent_Name + \", \" + Twelfth_Month_Percent_Name as Percent_Names, Cumulative_Cur_Month_Percent_Name + \" desc nulls last, \" + Cur_Month_Percent_Name + \" desc nulls last, \" + First_Month_Percent_Name + \" desc nulls last, \" + Second_Month_Percent_Name + \" desc nulls last, \" + Third_Month_Percent_Name + \" desc nulls last, \" + Fourth_Month_Percent_Name + \" desc nulls last, \" + Fifth_Month_Percent_Name + \" desc nulls last, \" + Sixth_Month_Percent_Name + \" desc nulls last, \" + Seventh_Month_Percent_Name + \" desc nulls last, \" + Eighth_Month_Percent_Name + \" desc nulls last, \" + Ninth_Month_Percent_Name + \" desc nulls last, \" + Tenth_Month_Percent_Name + \" desc nulls last, \" + Eleventh_Month_Percent_Name + \" desc nulls last, \" + Twelfth_Month_Percent_Name as Order_By_Percent_Names,Cur_Month_Amount_Quantity_Name + \", \" + First_Month_Amount_Quantity_Name + \", \" + Second_Month_Amount_Quantity_Name + \", \" + Third_Month_Amount_Quantity_Name + \", \" + Fourth_Month_Amount_Quantity_Name + \", \" + Fifth_Month_Amount_Quantity_Name + \", \" + Sixth_Month_Amount_Quantity_Name + \", \" + Seventh_Month_Amount_Quantity_Name + \", \" + Eighth_Month_Amount_Quantity_Name + \", \" + Ninth_Month_Amount_Quantity_Name + \", \" + Tenth_Month_Amount_Quantity_Name + \", \" + Eleventh_Month_Amount_Quantity_Name + \", \" + Twelfth_Month_Amount_Quantity_Name as Amount_Quantity_Names;\nq = foreach q generate Cur_Max_Date_sec_epoch, Cur_Min_Date_sec_epoch, Cumulative_Cur_Month_Percent_Name, Cur_Month_Percent_Name, Cur_Month_Amount_Quantity_Name, First_Max_Date_sec_epoch, First_Min_Date_sec_epoch, First_Month_Percent_Name, First_Month_Amount_Quantity_Name, Second_Max_Date_sec_epoch, Second_Min_Date_sec_epoch, Second_Month_Percent_Name, Second_Month_Amount_Quantity_Name, Third_Max_Date_sec_epoch, Third_Min_Date_sec_epoch, Third_Month_Percent_Name, Third_Month_Amount_Quantity_Name, Fourth_Max_Date_sec_epoch, Fourth_Min_Date_sec_epoch, Fourth_Month_Percent_Name, Fourth_Month_Amount_Quantity_Name, Fifth_Max_Date_sec_epoch, Fifth_Min_Date_sec_epoch, Fifth_Month_Percent_Name, Fifth_Month_Amount_Quantity_Name, Sixth_Max_Date_sec_epoch, Sixth_Min_Date_sec_epoch, Sixth_Month_Percent_Name, Sixth_Month_Amount_Quantity_Name, Seventh_Max_Date_sec_epoch, Seventh_Min_Date_sec_epoch, Seventh_Month_Percent_Name, Seventh_Month_Amount_Quantity_Name, Eighth_Max_Date_sec_epoch, Eighth_Min_Date_sec_epoch, Eighth_Month_Percent_Name, Eighth_Month_Amount_Quantity_Name, Ninth_Max_Date_sec_epoch, Ninth_Min_Date_sec_epoch, Ninth_Month_Percent_Name, Ninth_Month_Amount_Quantity_Name, Tenth_Max_Date_sec_epoch, Tenth_Min_Date_sec_epoch, Tenth_Month_Percent_Name, Tenth_Month_Amount_Quantity_Name, Eleventh_Max_Date_sec_epoch, Eleventh_Min_Date_sec_epoch, Eleventh_Month_Percent_Name, Eleventh_Month_Amount_Quantity_Name, Twelfth_Max_Date_sec_epoch, Twelfth_Min_Date_sec_epoch, Twelfth_Month_Percent_Name, Twelfth_Month_Amount_Quantity_Name, Cur_3_Month_Range, Cur_6_Month_Range, Cur_12_Month_Range,substr(Percent_Names, 1, index_of(Percent_Names, \"'\", 1, ({{cell(static_1.selection, 0, \"Number_of_Months\").asString()}} + 2)*2)) as 'Percent_Measure_Names', substr(Order_By_Percent_Names, 1, index_of(Order_By_Percent_Names, \"'\", 1, ({{cell(static_1.selection, 0, \"Number_of_Months\").asString()}} + 2)*2)) + \"desc nulls last\" as 'Order_By_Percent_Measure_Names', substr(Amount_Quantity_Names , 1, index_of(Amount_Quantity_Names, \"'\", 1, ({{cell(static_1.selection, 0, \"Number_of_Months\").asString()}} + 1)*2)) as 'Amount_Measure_Names' ; \nq = limit q 2000;",
        "receiveFacetSource" : {
          "mode" : "all",
          "steps" : [ ]
        },
        "selectMode" : "single",
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : true,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "bins" : {
              "breakpoints" : {
                "high" : 100,
                "low" : 0
              },
              "bands" : {
                "high" : {
                  "color" : "#008000",
                  "label" : ""
                },
                "low" : {
                  "color" : "#B22222",
                  "label" : ""
                },
                "medium" : {
                  "color" : "#ffa500",
                  "label" : ""
                }
              }
            },
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "right-top",
              "inside" : false
            },
            "axisMode" : "multi",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "hbar",
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "center",
              "subtitleLabel" : ""
            },
            "binValues" : false,
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "dimensionAxis" : {
              "showTitle" : true,
              "customSize" : "auto",
              "showAxis" : true,
              "title" : "",
              "icons" : {
                "useIcons" : false,
                "iconProps" : {
                  "fit" : "cover",
                  "column" : "",
                  "type" : "round"
                }
              }
            },
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      },
      "MAPE_by_accounts" : {
        "broadcastFacet" : true,
        "groups" : [ ],
        "label" : "MAPE by Accounts",
        "numbers" : [ ],
        "query" : "forecasts = load \"${App.Datasets.MFG_Demo_Data.FullyQualifiedName}\";\n forecasts = filter forecasts by 'PeriodStartDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\n forecasts = filter forecasts by 'PeriodEndDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\n forecasts = foreach forecasts generate  {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000 as 'Start', {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000 as 'End', 'AccountProductPeriodForecastId' as 'Id', 'AccountName' as 'Account.Name', 'PeriodStartDate_sec_epoch' as 'StartDate_sec_epoch', 'PeriodEndDate_sec_epoch' as 'ActualEndDate_sec_epoch', 'ForecastedRevenueFinal'/'ForecastedQuantityFinal' as 'SalesPrice', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 0 as 'DiscountPercentage', 0 as 'DerivedActualAmount', 'ForecastedRevenueFinal' as 'ForecastedAmountFinal', 'ForecastedDailyRevenue' as 'ForecastedDailyAmount', 'Forecast' as 'ForecastedRevenue', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedQuantity' as 'ForecastedQuantity';\n Start = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'Account.Name' as 'Account.Name', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"yyyy\") else date_to_string(toDate('Start'),\"yyyy\") end as 'Date_Year', case when ('StartDate_sec_epoch' >= 'Start') then date_to_string(toDate('StartDate_sec_epoch'),\"MM\") else date_to_string(toDate('Start'),\"MM\") end as 'Date_Month',                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyAmount' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyAmount' else 'ForecastedAmountFinal' end as 'Amount'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantity' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantity' else 'ForecastedQuantityFinal' end as 'Quantity',                   case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyRevenueBAdj' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyRevenueBAdj' else 'ForecastedRevenue' end as 'Amount_before_adj'                ,                 case when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch')))) && 'End' >= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),month_last_day(toDate('StartDate_sec_epoch')))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' >= 'Start') && ('ActualEndDate_sec_epoch' >= 'End') && 'End' <= date_to_epoch(month_last_day(toDate('StartDate_sec_epoch'))) then (daysBetween(toDate('StartDate_sec_epoch'),toDate('End'))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' >= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= date_to_epoch(month_last_day(toDate('Start'))) then (daysBetween(toDate('Start'),month_last_day(toDate('Start')))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('ActualEndDate_sec_epoch' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' >= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('ActualEndDate_sec_epoch'))+1) * 'ForecastedDailyQuantityBAdj' when ('StartDate_sec_epoch' < 'Start') && ('End' <= date_to_epoch(month_last_day(toDate('Start')))) && 'End' <= 'ActualEndDate_sec_epoch' then (daysBetween(toDate('Start'),toDate('End'))+1) * 'ForecastedDailyQuantityBAdj' else 'ForecastedQuantity' end as 'Quantity_before_adj'                                 , 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\n End_Value = foreach forecasts generate 'Start' as 'Start', 'End' as 'End', 'Id' as 'Id', 'Account.Name' as 'Account.Name', 'StartDate_sec_epoch' as 'Start Date', 'ActualEndDate_sec_epoch' as 'End Date', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"yyyy\") else  date_to_string(toDate('End'),\"yyyy\") end as 'Date_Year', case when ('ActualEndDate_sec_epoch' < 'End') then date_to_string(toDate('ActualEndDate_sec_epoch'),\"MM\") else  date_to_string(toDate('End'),\"MM\") end as 'Date_Month', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyAmount' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyAmount' \n    else 0 end as 'Amount', case \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantity' \n    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400)) \n    && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantity' \n    else 0 end as 'Quantity', case     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyRevenueBAdj'     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyRevenueBAdj'     else 0 end as 'Amount_before_adj',  case     when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' < 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('ActualEndDate_sec_epoch'))) - 2764800)))))),toDate('ActualEndDate_sec_epoch'))) * 'ForecastedDailyQuantityBAdj'    when (('StartDate_sec_epoch' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('Start' < (date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))) + 86400))     && ('ActualEndDate_sec_epoch' > 'End')) then (daysBetween(toDate((date_to_epoch(month_last_day(toDate((date_to_epoch(month_last_day(toDate('End'))) - 2764800)))))),toDate('End'))) * 'ForecastedDailyQuantityBAdj'     else 0 end as 'Quantity_before_adj', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal';\n DataForFill = union Start, End_Value;\n  DataForFill = foreach DataForFill generate 'Id' as 'Id', 'Account.Name' as 'Account.Name', 'Date_Year' as 'Date_Year', 'Date_Month' as 'Date_Month','Start' as 'Start', 'End' as 'End', 'Start Date' as 'Start Date', 'End Date' as 'End Date','Amount' as 'Amount', 'Quantity' as 'Quantity','Amount_before_adj' as 'Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj', 'ForecastedAmountFinal' as 'ForecastedAmountFinal', 'ForecastedDailyAmount' as 'ForecastedDailyAmount', 'ForecastedDailyQuantity' as 'ForecastedDailyQuantity', 'ForecastedQuantityFinal' as 'ForecastedQuantityFinal', 'ForecastedDailyRevenueBAdj' as 'ForecastedDailyRevenueBAdj', 'ForecastedDailyQuantityBAdj' as 'ForecastedDailyQuantityBAdj', 'ForecastedQuantity' as 'ForecastedQuantity', 'ForecastedRevenue' as 'ForecastedRevenue';\n FilledData = fill DataForFill by (dateCols=('Date_Year', 'Date_Month', \"Y-M\"), partition='Id');\n FilledData = group FilledData by ('Id', 'Date_Year', 'Date_Month');\n FilledData = foreach FilledData generate 'Id', first('Account.Name') as 'Account.Name', 'Date_Year', 'Date_Month', date_to_epoch(toDate('Date_Year'+\"-\"+'Date_Month'+\"-01\",\"yyyy-MM-dd\")) as 'Date',first('Start') as 'Start', min(first('Start')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'StartFilter', first('End') as 'End', min(first('End')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'EndFilter',  min(first('Start Date')) over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'Start Date', max(first('End Date')) over ([..] partition by 'Id' ) as 'End Date', sum('Amount') as 'Amount', min(first('ForecastedDailyAmount'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyAmount', sum('Quantity') as 'Quantity', min(first('ForecastedDailyQuantity'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantity', sum('Amount_before_adj') as 'Amount_before_adj', min(first('ForecastedDailyRevenueBAdj'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyRevenueBAdj', sum('Quantity_before_adj') as 'Quantity_before_adj', min(first('ForecastedDailyQuantityBAdj'))over ([..0] partition by 'Id' order by ('Date_Year','Date_Month')) as 'ForecastedDailyQuantityBAdj';\n FilledData = filter FilledData by coalesce('Start',0) != 0 || ('Date' > 'StartFilter' && 'Date' > 'Start Date' && 'Date' < 'End Date' && 'Date' < 'EndFilter');\n FilledData = foreach FilledData generate 'Id', 'Account.Name' as 'Account.Name', 'Date_Year', 'Date_Month', case when 'Amount' is null then month_days(toDate('Date'))*'ForecastedDailyAmount' else 'Amount' end as 'Amount', case when 'Quantity' is null then month_days(toDate('Date'))*'ForecastedDailyQuantity' else 'Quantity' end as 'Quantity', case when 'Amount_before_adj' is null then month_days(toDate('Date'))*'ForecastedDailyRevenueBAdj' else 'Amount_before_adj' end as 'Amount_before_adj', case when 'Quantity_before_adj' is null then month_days(toDate('Date'))*'ForecastedDailyQuantityBAdj' else 'Quantity_before_adj' end as 'Quantity_before_adj';\n forecasts_results = group FilledData by ('Account.Name', 'Date_Year', 'Date_Month');\n forecasts_results = foreach forecasts_results generate 'Date_Year'+\"~~~\"+'Date_Month' as 'StartDate_Year~~~StartDate_Month', 'Date_Year' as 'StartDate_Year', \"01\" as 'StartDate_Day', 'Date_Month' as 'StartDate_Month', 'Account.Name' as 'Account.Name', sum('Amount') as 'Amount', sum('Quantity') as 'Quantity', sum('Amount_before_adj') as 'Amount_before_adj', sum('Quantity_before_adj') as 'Quantity_before_adj';\n forecasts_results = foreach forecasts_results generate 'StartDate_Year' + \"~~~\" + 'StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'StartDate_Year' as 'StartDate_Year', 'StartDate_Month' as 'StartDate_Month', \"01\" as 'StartDate_Day', 'Account.Name' as 'Account.Name', 'Amount' as 'Amount', 'Quantity' as 'Quantity', 'Amount_before_adj' as 'Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj';\n forecast_results = filter forecasts_results by {{row(Date_Filter_1.result, [0], [\"Min\",\"Max\"]).asDateRange(\"date('StartDate_Year','StartDate_Month','StartDate_Day')\")}};\n forecast_results = group forecast_results by ('Account.Name', 'StartDate_Year~~~StartDate_Month');\n forecast_results = foreach forecast_results generate 'Account.Name' as 'Account.Name', 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', first('StartDate_Year') as 'StartDate_Year', first('StartDate_Month') as 'StartDate_Month', sum('Amount') as 'Amount', sum(sum('Amount')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity', sum('Amount_before_adj') as 'Amount_before_adj', sum(sum('Amount_before_adj')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Amount_before_adj', sum('Quantity_before_adj') as 'Quantity_before_adj', sum(sum('Quantity_before_adj')) over ([..0] partition by all order by 'StartDate_Year~~~StartDate_Month' asc) as 'cumm_Quantity_before_adj';\n forecast_results = foreach forecast_results generate 'Account.Name' as 'Account.Name', 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', 'Amount' as 'Amount', 'cumm_Amount' as 'cumm_Amount', 'Quantity' as 'Quantity', 'cumm_Quantity' as 'cumm_Quantity', 'Amount_before_adj' as 'Amount_before_adj', 'cumm_Amount_before_adj' as 'cumm_Amount_before_adj', 'Quantity_before_adj' as 'Quantity_before_adj', 'cumm_Quantity_before_adj' as 'cumm_Quantity_before_adj';\n forecast_results = order forecast_results by 'StartDate_Year~~~StartDate_Month' asc;\n\n  orders = load \"${App.Datasets.MFG_Order_Product.FullyQualifiedName}\";\n orders = filter orders by 'OrderEffectiveDate_sec_epoch' <= {{coalesce(cell(Date_Filter_1.result,0,\"Max\"),0).asObject()}}/1000;\n orders = filter orders by 'OrderEffectiveDate_sec_epoch' >= {{coalesce(cell(Date_Filter_1.result,0,\"Min\"),0).asObject()}}/1000;\n orders = group orders by ('OrderAccountName', 'OrderEffectiveDate_Year', 'OrderEffectiveDate_Month');\n order_results = foreach orders generate 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' as 'StartDate_Year~~~StartDate_Month', 'OrderAccountName' as 'Account.Name', sum('TotalPrice') as 'Amount', sum(sum('TotalPrice')) over ([..0] partition by all order by 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' asc) as 'cumm_Amount', sum('Quantity') as 'Quantity', sum(sum('Quantity')) over ([..0] partition by all order by 'OrderEffectiveDate_Year' + \"~~~\" + 'OrderEffectiveDate_Month' asc) as 'cumm_Quantity';\n order_results = order order_results by 'StartDate_Year~~~StartDate_Month' asc;\n\n  result = cogroup order_results by ('Account.Name', 'StartDate_Year~~~StartDate_Month') full, forecast_results by ('Account.Name', 'StartDate_Year~~~StartDate_Month');\n result = foreach result generate coalesce(forecast_results.'StartDate_Year~~~StartDate_Month', order_results.'StartDate_Year~~~StartDate_Month') as 'StartDate_Year~~~StartDate_Month',  coalesce(forecast_results.'Account.Name', order_results.'Account.Name') as 'Account.Name', coalesce(sum(order_results.'Amount'),0) as 'Actuals', coalesce(sum(forecast_results.'Amount'),0) as 'Forecast', coalesce(sum(forecast_results.'Amount_before_adj'),0) as 'Forecast_before_adj', coalesce(sum(order_results.'Quantity'),0) as 'ActualQuantity', coalesce(sum(forecast_results.'Quantity'),0) as 'ForecastQuantity', coalesce(sum(forecast_results.'Quantity_before_adj'),0) as 'ForecastQuantity_before_adj';\n  result = group result by ('Account.Name', 'StartDate_Year~~~StartDate_Month');\n result = foreach result generate 'Account.Name' as 'Account.Name', 'StartDate_Year~~~StartDate_Month' as 'StartDate_Year~~~StartDate_Month', sum('Actuals') as 'Actuals', sum('Forecast') as 'Forecast', sum('Actuals')-sum('Forecast') as 'ForecastAmountGap', (case when sum('Actuals')==0 then null else abs(sum('Actuals')-sum('Forecast'))/sum('Actuals') end) as 'amount_mape', sum('Actuals')-sum('Forecast_before_adj') as 'ForecastAmountGap_before_adj', (case when sum('Actuals')==0 then null else abs(sum('Actuals')-sum('Forecast_before_adj'))/sum('Actuals') end) as 'amount_mape_before_adj', (case when sum('Actuals')==0 then 0 else 1 end) as 'amount_mape_eligibile', (case when sum('ActualQuantity')==0 then null else abs(sum('ActualQuantity')-sum('ForecastQuantity'))/sum('ActualQuantity') end) as 'quantity_mape', (case when sum('ActualQuantity')==0 then 0 else 1 end) as 'quantity_mape_eligibile', sum('ActualQuantity')-sum('ForecastQuantity') as 'ForecastQuantityGap', (case when sum('ActualQuantity')==0 then null else abs(sum('ActualQuantity')-sum('ForecastQuantity_before_adj'))/sum('ActualQuantity') end) as 'quantity_mape_before_adj', sum('ActualQuantity')-sum('ForecastQuantity_before_adj') as 'ForecastQuantityGap_before_adj';\n result = group result by 'Account.Name';\n result = foreach result generate 'Account.Name' as 'Account.Name', sum('amount_mape')*100/sum('amount_mape_eligibile') as 'amount_mape', sum('quantity_mape')*100/sum('quantity_mape_eligibile') as 'quantity_mape', sum('ForecastAmountGap') as 'ForecastAmountGap', sum('ForecastQuantityGap') as 'ForecastQuantityGap', sum('amount_mape_before_adj')*100/sum('amount_mape_eligibile') as 'amount_mape_before_adj', sum('quantity_mape_before_adj')*100/sum('quantity_mape_eligibile') as 'quantity_mape_before_adj', sum('ForecastAmountGap_before_adj') as 'ForecastAmountGap_before_adj', sum('ForecastQuantityGap_before_adj') as 'ForecastQuantityGap_before_adj';\n result = foreach result generate 'Account.Name' as 'Account.Name', {{column(measure_selector_for_1.selection, column(Qty_vs_Amount_1.selection, [\"mape_selector_col\"])).asObject()}} as {{column(measure_selector_for_1.selection, column(Qty_vs_Amount_1.selection, [\"mape_selector_col\"])).asObject()}};\n result = order result by {{column(measure_selector_for_1.selection, column(Qty_vs_Amount_1.selection, [\"mape_selector_col\"])).asObject()}} desc nulls last;\n ",
        "receiveFacetSource" : {
          "mode" : "all",
          "steps" : [ ]
        },
        "selectMode" : "multi",
        "start" : [ ],
        "strings" : [ ],
        "type" : "saql",
        "useGlobal" : false,
        "visualizationParameters" : {
          "parameters" : {
            "autoFitMode" : "keepLabels",
            "showValues" : true,
            "stack" : false,
            "showPoints" : true,
            "legend" : {
              "descOrder" : false,
              "showHeader" : true,
              "show" : true,
              "customSize" : "auto",
              "position" : "bottom-center",
              "inside" : false
            },
            "axisMode" : "sync",
            "tooltip" : {
              "showBinLabel" : true,
              "measures" : "",
              "showNullValues" : true,
              "showPercentage" : true,
              "showDimensions" : true,
              "showMeasures" : true,
              "customizeTooltip" : false,
              "dimensions" : ""
            },
            "visualizationType" : "time-combo",
            "missingValue" : "connect",
            "showValuesOnLine" : false,
            "timeAxis" : {
              "showTitle" : true,
              "showAxis" : true,
              "referenceLines" : [ ],
              "title" : "Time (Year>Month)"
            },
            "title" : {
              "fontSize" : 14,
              "subtitleFontSize" : 11,
              "label" : "",
              "align" : "left",
              "subtitleLabel" : ""
            },
            "trellis" : {
              "flipLabels" : false,
              "showGridLines" : true,
              "size" : [
                100,
                100
              ],
              "enable" : false,
              "type" : "x",
              "chartsPerLine" : 4
            },
            "plots" : {
              "cumm_Amount" : {
                "mark" : "line"
              },
              "cumm_Amount_low_95" : {
                "mark" : "line"
              },
              "Amount" : {
                "mark" : "bar"
              },
              "cumm_Planned_Revenue" : {
                "mark" : "line"
              },
              "cumm_Amount_high_95" : {
                "mark" : "line"
              }
            },
            "showActionMenu" : true,
            "measureAxis2" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "measureAxis1" : {
              "sqrtScale" : false,
              "showTitle" : true,
              "showAxis" : true,
              "title" : "Amount",
              "customDomain" : {
                "showDomain" : false
              }
            },
            "theme" : "wave",
            "applyConditionalFormatting" : true
          },
          "type" : "chart"
        }
      }
    },
    "widgetStyle" : {
      "backgroundColor" : "rgba(255, 255, 255, 0)",
      "borderColor" : "#E6ECF2",
      "borderEdges" : [ ],
      "borderRadius" : 0,
      "borderWidth" : 1
    },
    "widgets" : {
      "text_18" : {
        "parameters" : {
          "content" : {
            "displayTemplate" : "Choose KPI:"
          },
          "fontSize" : 12,
          "showActionMenu" : true,
          "textAlignment" : "center",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "text_17" : {
        "parameters" : {
          "content" : {
            "displayTemplate" : "NET CHANGE"
          },
          "fontSize" : 12,
          "showActionMenu" : true,
          "textAlignment" : "left",
          "textColor" : "#C6D3E1",
          "tooltip" : "Net change in the forecasted revenue"
        },
        "type" : "text"
      },
      "text_19" : {
        "parameters" : {
          "content" : {
            "displayTemplate" : "Group by:"
          },
          "fontSize" : 12,
          "showActionMenu" : true,
          "textAlignment" : "center",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "container_13" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "text_14" : {
        "parameters" : {
          "content" : {
            "displayTemplate" : "MAPE ⓘ"
          },
          "fontSize" : 12,
          "showActionMenu" : false,
          "textAlignment" : "left",
          "textColor" : "#C6D3E1",
          "tooltip" : "Mean Absolute Percentage Errore"
        },
        "type" : "text"
      },
      "text_13" : {
        "parameters" : {
          "content" : {
            "displayTemplate" : "PRODUCTS"
          },
          "fontSize" : 12,
          "showActionMenu" : true,
          "textAlignment" : "left",
          "textColor" : "#C6D3E1"
        },
        "type" : "text"
      },
      "text_16" : {
        "parameters" : {
          "content" : {
            "displayTemplate" : "ACTUAL VS. FORECASTED REVENUE"
          },
          "fontSize" : 12,
          "showActionMenu" : false,
          "textAlignment" : "left",
          "textColor" : "#C6D3E1"
        },
        "type" : "text"
      },
      "text_15" : {
        "parameters" : {
          "content" : {
            "displayTemplate" : "MAPE (ADJUSTED) ⓘ"
          },
          "fontSize" : 12,
          "showActionMenu" : false,
          "textAlignment" : "left",
          "textColor" : "#C6D3E1",
          "tooltip" : "Adjusted Mean Absolute Percentage Error (MAPE) of the forecast"
        },
        "type" : "text"
      },
      "text_10" : {
        "parameters" : {
          "content" : {
            "displayTemplate" : "FORECASTED REVENUE (ADJUSTED)"
          },
          "fontSize" : 12,
          "showActionMenu" : false,
          "textAlignment" : "left",
          "textColor" : "#C6D3E1"
        },
        "type" : "text"
      },
      "text_12" : {
        "parameters" : {
          "content" : {
            "displayTemplate" : "FORECASTED REVENUE"
          },
          "fontSize" : 12,
          "showActionMenu" : false,
          "textAlignment" : "left",
          "textColor" : "#C6D3E1"
        },
        "type" : "text"
      },
      "text_11" : {
        "parameters" : {
          "content" : {
            "displayTemplate" : "ACCOUNTS"
          },
          "fontSize" : 12,
          "showActionMenu" : true,
          "textAlignment" : "left",
          "textColor" : "#C6D3E1"
        },
        "type" : "text"
      },
      "container_1" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "container_2" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "container_3" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "chart_9" : {
        "parameters" : {
          "autoFitMode" : "keepLabels",
          "showValues" : true,
          "bins" : {
            "breakpoints" : {
              "high" : 100,
              "low" : 0
            },
            "bands" : {
              "high" : {
                "color" : "#008000",
                "label" : ""
              },
              "low" : {
                "color" : "#B22222",
                "label" : ""
              },
              "medium" : {
                "color" : "#ffa500",
                "label" : ""
              }
            }
          },
          "legend" : {
            "descOrder" : false,
            "showHeader" : true,
            "show" : false,
            "customSize" : "auto",
            "position" : "bottom-center",
            "inside" : false
          },
          "axisMode" : "sync",
          "tooltip" : {
            "showBinLabel" : true,
            "measures" : "",
            "showNullValues" : true,
            "showPercentage" : true,
            "showDimensions" : true,
            "showMeasures" : true,
            "customizeTooltip" : false,
            "dimensions" : ""
          },
          "visualizationType" : "hbar",
          "exploreLink" : true,
          "title" : {
            "fontSize" : 14,
            "subtitleFontSize" : 11,
            "label" : "",
            "align" : "left",
            "subtitleLabel" : ""
          },
          "trellis" : {
            "flipLabels" : false,
            "showGridLines" : true,
            "size" : [
              100,
              100
            ],
            "enable" : false,
            "type" : "x",
            "parameters" : { },
            "chartsPerLine" : 4
          },
          "binValues" : false,
          "showActionMenu" : true,
          "measureAxis2" : {
            "sqrtScale" : false,
            "showTitle" : true,
            "showAxis" : true,
            "title" : "",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "measureAxis1" : {
            "sqrtScale" : false,
            "showTitle" : true,
            "showAxis" : true,
            "title" : "{{cell(Qty_vs_Amount_1.selection, 0, \"label\").asObject()}}",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "theme" : "dark",
          "step" : "MAPE_by_accounts",
          "applyConditionalFormatting" : true,
          "dimensionAxis" : {
            "showTitle" : true,
            "customSize" : "auto",
            "showAxis" : true,
            "title" : "Account",
            "icons" : {
              "useIcons" : false,
              "iconProps" : {
                "fit" : "cover",
                "column" : "",
                "type" : "round",
                "parameters" : { }
              }
            }
          }
        },
        "type" : "chart"
      },
      "container_4" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "chart_6" : {
        "parameters" : {
          "autoFitMode" : "keepLabels",
          "bins" : {
            "breakpoints" : {
              "high" : 100,
              "low" : 0
            },
            "bands" : {
              "high" : {
                "color" : "#008000",
                "label" : ""
              },
              "low" : {
                "color" : "#B22222",
                "label" : ""
              },
              "medium" : {
                "color" : "#ffa500",
                "label" : ""
              }
            }
          },
          "showValues" : true,
          "legend" : {
            "descOrder" : false,
            "showHeader" : true,
            "show" : true,
            "customSize" : "auto",
            "position" : "right-top",
            "inside" : false
          },
          "axisMode" : "sync",
          "tooltip" : {
            "showBinLabel" : true,
            "measures" : [
              "ForecastAmountGap",
              "ForecastAmountGap_before_adj"
            ],
            "showNullValues" : true,
            "showPercentage" : true,
            "customText" : "Date: [StartDate_Year~~~StartDate_Month]",
            "showDimensions" : false,
            "showMeasures" : true,
            "customizeTooltip" : true,
            "dimensions" : [
              "StartDate_Year~~~StartDate_Month"
            ]
          },
          "visualizationType" : "time-bar",
          "dashLine" : {
            "measures" : "",
            "showDashLine" : false
          },
          "exploreLink" : true,
          "timeAxis" : {
            "showTitle" : true,
            "showAxis" : true,
            "title" : "Period"
          },
          "title" : {
            "fontSize" : 14,
            "subtitleFontSize" : 11,
            "label" : "",
            "align" : "left",
            "subtitleLabel" : ""
          },
          "trellis" : {
            "flipLabels" : false,
            "showGridLines" : true,
            "size" : [
              100,
              100
            ],
            "enable" : false,
            "type" : "x",
            "parameters" : { },
            "chartsPerLine" : 4
          },
          "binValues" : false,
          "fillArea" : true,
          "showActionMenu" : true,
          "showZero" : true,
          "measureAxis2" : {
            "sqrtScale" : false,
            "showTitle" : true,
            "showAxis" : true,
            "title" : "",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "measureAxis1" : {
            "sqrtScale" : false,
            "showTitle" : false,
            "showAxis" : true,
            "title" : "Actual vs Forecast",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "valueType" : "none",
          "theme" : "wave",
          "step" : "MAPE_by_Accounts_2",
          "applyConditionalFormatting" : true,
          "dimensionAxis" : {
            "showTitle" : true,
            "customSize" : "auto",
            "showAxis" : true,
            "title" : "",
            "icons" : {
              "useIcons" : false,
              "iconProps" : {
                "fit" : "cover",
                "column" : "",
                "type" : "round",
                "parameters" : { }
              }
            }
          },
          "drawArea" : {
            "measure" : "",
            "showDrawArea" : false,
            "bounding1" : "",
            "bounding2" : ""
          }
        },
        "type" : "chart"
      },
      "text_3" : {
        "parameters" : {
          "content" : {
            "displayTemplate" : "How accurate are my account forecasts?"
          },
          "fontSize" : 18,
          "showActionMenu" : false,
          "textAlignment" : "left",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "text_2" : {
        "parameters" : {
          "content" : {
            "displayTemplate" : "   How did the forecast accuracy trend over time? "
          },
          "fontSize" : 16,
          "showActionMenu" : false,
          "textAlignment" : "left",
          "textColor" : "#091A3E"
        },
        "type" : "text"
      },
      "chart_5" : {
        "parameters" : {
          "showPoints" : false,
          "legend" : {
            "descOrder" : false,
            "showHeader" : true,
            "show" : true,
            "customSize" : "auto",
            "position" : "right-top",
            "inside" : false
          },
          "axisMode" : "sync",
          "tooltip" : {
            "showBinLabel" : true,
            "measures" : [
              "amount_mape",
              "amount_mape_before_adj",
              "amount_mape_cumulative"
            ],
            "showNullValues" : true,
            "showPercentage" : true,
            "customText" : "Date: [StartDate_Year~~~StartDate_Month]",
            "showDimensions" : false,
            "showMeasures" : true,
            "customizeTooltip" : true,
            "dimensions" : [
              "StartDate_Year~~~StartDate_Month"
            ]
          },
          "visualizationType" : "time",
          "missingValue" : "connect",
          "exploreLink" : true,
          "title" : {
            "fontSize" : 14,
            "subtitleFontSize" : 11,
            "label" : "",
            "align" : "left",
            "subtitleLabel" : ""
          },
          "trellis" : {
            "flipLabels" : false,
            "showGridLines" : true,
            "size" : [
              100,
              100
            ],
            "enable" : false,
            "type" : "x",
            "parameters" : { },
            "chartsPerLine" : 4
          },
          "binValues" : false,
          "showZero" : true,
          "valueType" : "none",
          "theme" : "wave",
          "applyConditionalFormatting" : true,
          "dimensionAxis" : {
            "showTitle" : true,
            "customSize" : "auto",
            "showAxis" : true,
            "title" : "",
            "icons" : {
              "useIcons" : false,
              "iconProps" : {
                "fit" : "cover",
                "column" : "",
                "type" : "round",
                "parameters" : { }
              }
            }
          },
          "drawArea" : {
            "measure" : "",
            "showDrawArea" : false,
            "bounding1" : "",
            "bounding2" : ""
          },
          "autoFitMode" : "keepLabels",
          "bins" : {
            "breakpoints" : {
              "high" : 100,
              "low" : 0
            },
            "bands" : {
              "high" : {
                "color" : "#008000",
                "label" : ""
              },
              "low" : {
                "color" : "#B22222",
                "label" : ""
              },
              "medium" : {
                "color" : "#ffa500",
                "label" : ""
              }
            }
          },
          "dashLine" : {
            "measures" : "",
            "showDashLine" : false
          },
          "timeAxis" : {
            "showTitle" : true,
            "showAxis" : true,
            "title" : "Period"
          },
          "fillArea" : true,
          "showActionMenu" : true,
          "measureAxis2" : {
            "sqrtScale" : false,
            "showTitle" : true,
            "showAxis" : true,
            "title" : "",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "measureAxis1" : {
            "sqrtScale" : false,
            "showTitle" : false,
            "showAxis" : true,
            "title" : "Amount",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "step" : "MAPE_by_Accounts_1"
        },
        "type" : "chart"
      },
      "text_5" : {
        "parameters" : {
          "content" : {
            "displayTemplate" : "Accounts By"
          },
          "fontSize" : 14,
          "showActionMenu" : true,
          "textAlignment" : "right",
          "textColor" : "#C6D3E1"
        },
        "type" : "text"
      },
      "text_4" : {
        "parameters" : {
          "content" : {
            "displayTemplate" : "{{column(Prod_vs_Prod_Family_1.selection, [\"keyword\"]).asObject()}} By "
          },
          "fontSize" : 14,
          "showActionMenu" : true,
          "textAlignment" : "right",
          "textColor" : "#C6D3E1"
        },
        "type" : "text"
      },
      "text_7" : {
        "parameters" : {
          "content" : {
            "displayTemplate" : "ACTUAL VS. FORECASTED REVENUE (ADJUSTED)"
          },
          "fontSize" : 12,
          "showActionMenu" : false,
          "textAlignment" : "left",
          "textColor" : "#C6D3E1"
        },
        "type" : "text"
      },
      "chart_2" : {
        "parameters" : {
          "autoFitMode" : "keepLabels",
          "showValues" : true,
          "bins" : {
            "breakpoints" : {
              "high" : 100,
              "low" : 0
            },
            "bands" : {
              "high" : {
                "color" : "#008000",
                "label" : ""
              },
              "low" : {
                "color" : "#B22222",
                "label" : ""
              },
              "medium" : {
                "color" : "#ffa500",
                "label" : ""
              }
            }
          },
          "legend" : {
            "descOrder" : false,
            "showHeader" : false,
            "show" : true,
            "customSize" : "auto",
            "position" : "right-top",
            "inside" : false
          },
          "axisMode" : "sync",
          "tooltip" : {
            "showBinLabel" : true,
            "measures" : "",
            "showNullValues" : true,
            "showPercentage" : true,
            "showDimensions" : true,
            "showMeasures" : true,
            "customizeTooltip" : false,
            "dimensions" : ""
          },
          "visualizationType" : "time-bar",
          "exploreLink" : true,
          "timeAxis" : {
            "showTitle" : false,
            "showAxis" : true,
            "title" : ""
          },
          "title" : {
            "fontSize" : 14,
            "subtitleFontSize" : 11,
            "label" : "",
            "align" : "center",
            "subtitleLabel" : ""
          },
          "trellis" : {
            "flipLabels" : false,
            "showGridLines" : true,
            "size" : [
              100,
              100
            ],
            "enable" : false,
            "type" : "x",
            "parameters" : { },
            "chartsPerLine" : 4
          },
          "binValues" : false,
          "showActionMenu" : true,
          "measureAxis2" : {
            "sqrtScale" : false,
            "showTitle" : true,
            "showAxis" : true,
            "title" : "",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "measureAxis1" : {
            "sqrtScale" : true,
            "showTitle" : false,
            "showAxis" : true,
            "title" : "",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "theme" : "wave",
          "step" : "Forecast_Change_Tren_1",
          "applyConditionalFormatting" : true
        },
        "type" : "chart"
      },
      "text_6" : {
        "parameters" : {
          "content" : {
            "displayTemplate" : "NOTE - All metrics are appropriated for selected time frame"
          },
          "fontSize" : 12,
          "showActionMenu" : false,
          "textAlignment" : "left",
          "textColor" : "#335779"
        },
        "type" : "text"
      },
      "chart_1" : {
        "parameters" : {
          "autoFitMode" : "keepLabels",
          "showValues" : true,
          "bins" : {
            "breakpoints" : {
              "high" : 100,
              "low" : 0
            },
            "bands" : {
              "high" : {
                "color" : "#008000",
                "label" : ""
              },
              "low" : {
                "color" : "#B22222",
                "label" : ""
              },
              "medium" : {
                "color" : "#ffa500",
                "label" : ""
              }
            }
          },
          "legend" : {
            "descOrder" : false,
            "showHeader" : true,
            "show" : false,
            "customSize" : "auto",
            "position" : "bottom-center",
            "inside" : false
          },
          "axisMode" : "sync",
          "tooltip" : {
            "showBinLabel" : true,
            "measures" : "",
            "showNullValues" : true,
            "showPercentage" : true,
            "showDimensions" : true,
            "showMeasures" : true,
            "customizeTooltip" : false,
            "dimensions" : ""
          },
          "visualizationType" : "hbar",
          "exploreLink" : true,
          "title" : {
            "fontSize" : 14,
            "subtitleFontSize" : 11,
            "label" : "",
            "align" : "left",
            "subtitleLabel" : ""
          },
          "trellis" : {
            "flipLabels" : false,
            "showGridLines" : true,
            "size" : [
              100,
              100
            ],
            "enable" : false,
            "type" : "x",
            "parameters" : { },
            "chartsPerLine" : 4
          },
          "binValues" : false,
          "showActionMenu" : true,
          "measureAxis2" : {
            "sqrtScale" : false,
            "showTitle" : true,
            "showAxis" : true,
            "title" : "",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "measureAxis1" : {
            "sqrtScale" : false,
            "showTitle" : true,
            "showAxis" : true,
            "title" : "{{cell(Qty_vs_Amount_1.selection, 0, \"label\").asObject()}}",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "theme" : "dark",
          "step" : "MAPE_by_Prod",
          "applyConditionalFormatting" : true,
          "dimensionAxis" : {
            "showTitle" : true,
            "customSize" : "auto",
            "showAxis" : true,
            "title" : "Product",
            "icons" : {
              "useIcons" : false,
              "iconProps" : {
                "fit" : "cover",
                "column" : "",
                "type" : "round",
                "parameters" : { }
              }
            }
          }
        },
        "type" : "chart"
      },
      "text_9" : {
        "parameters" : {
          "content" : {
            "displayTemplate" : "NOTE - MAPE refers to Mean Absolute Percentage Error"
          },
          "fontSize" : 12,
          "showActionMenu" : false,
          "textAlignment" : "right",
          "textColor" : "#335779"
        },
        "type" : "text"
      },
      "chart_3" : {
        "parameters" : {
          "autoFitMode" : "keepLabels",
          "showValues" : true,
          "bins" : {
            "breakpoints" : {
              "high" : 100,
              "low" : 0
            },
            "bands" : {
              "high" : {
                "color" : "#008000",
                "label" : ""
              },
              "low" : {
                "color" : "#B22222",
                "label" : ""
              },
              "medium" : {
                "color" : "#ffa500",
                "label" : ""
              }
            }
          },
          "legend" : {
            "descOrder" : false,
            "showHeader" : true,
            "show" : false,
            "customSize" : "auto",
            "position" : "right-top",
            "inside" : false
          },
          "axisMode" : "multi",
          "tooltip" : {
            "showBinLabel" : true,
            "measures" : "",
            "showNullValues" : true,
            "showPercentage" : true,
            "showDimensions" : true,
            "showMeasures" : true,
            "customizeTooltip" : false,
            "dimensions" : ""
          },
          "visualizationType" : "hbar",
          "exploreLink" : true,
          "title" : {
            "fontSize" : 14,
            "subtitleFontSize" : 11,
            "label" : "",
            "align" : "center",
            "subtitleLabel" : ""
          },
          "binValues" : false,
          "trellis" : {
            "flipLabels" : false,
            "showGridLines" : true,
            "size" : [
              100,
              100
            ],
            "enable" : false,
            "type" : "x",
            "parameters" : { },
            "chartsPerLine" : 4
          },
          "showActionMenu" : true,
          "measureAxis2" : {
            "sqrtScale" : false,
            "showTitle" : true,
            "showAxis" : true,
            "title" : "",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "measureAxis1" : {
            "sqrtScale" : false,
            "showTitle" : true,
            "showAxis" : true,
            "title" : "",
            "customDomain" : {
              "showDomain" : false
            }
          },
          "theme" : "dark",
          "step" : "Forecast_Change_by_P_1",
          "dimensionAxis" : {
            "showTitle" : false,
            "customSize" : "auto",
            "showAxis" : true,
            "title" : "",
            "icons" : {
              "useIcons" : false,
              "iconProps" : {
                "fit" : "cover",
                "column" : "",
                "type" : "round",
                "parameters" : { }
              }
            }
          },
          "applyConditionalFormatting" : true
        },
        "type" : "chart"
      },
      "text_8" : {
        "parameters" : {
          "content" : {
            "displayTemplate" : "What’s the change in forecast for the selected period?"
          },
          "fontSize" : 18,
          "showActionMenu" : true,
          "textAlignment" : "left",
          "textColor" : "#FFFFFF"
        },
        "type" : "text"
      },
      "text_1" : {
        "parameters" : {
          "content" : {
            "displayTemplate" : "Forecast Analysis"
          },
          "fontSize" : 16,
          "showActionMenu" : true,
          "textAlignment" : "left",
          "textColor" : "#091A3E"
        },
        "type" : "text"
      },
      "number_5" : {
        "parameters" : {
          "compact" : true,
          "exploreLink" : true,
          "measureField" : "ForecastAmountGap",
          "numberColor" : "#FFFFFF",
          "numberSize" : 24,
          "showActionMenu" : true,
          "step" : "MAPE_KPI_5",
          "textAlignment" : "left",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "number_4" : {
        "parameters" : {
          "compact" : true,
          "exploreLink" : true,
          "measureField" : "unique_Forecast.AccountId",
          "numberColor" : "#FFFFFF",
          "numberSize" : 24,
          "showActionMenu" : true,
          "step" : "Account_Product_Coun_1",
          "textAlignment" : "left",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "number_3" : {
        "parameters" : {
          "compact" : true,
          "exploreLink" : true,
          "measureField" : "Forecast_before_adj",
          "numberColor" : "#FFFFFF",
          "numberSize" : 24,
          "showActionMenu" : true,
          "step" : "MAPE_KPI_4",
          "textAlignment" : "left",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "text_40" : {
        "parameters" : {
          "content" : {
            "displayTemplate" : "Details Table"
          },
          "fontSize" : 16,
          "showActionMenu" : false,
          "textAlignment" : "left",
          "textColor" : "#091A3E"
        },
        "type" : "text"
      },
      "number_2" : {
        "parameters" : {
          "compact" : true,
          "exploreLink" : true,
          "measureField" : "Forecast",
          "numberColor" : "#FFFFFF",
          "numberSize" : 24,
          "showActionMenu" : true,
          "step" : "MAPE_KPI_3",
          "textAlignment" : "left",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "number_1" : {
        "parameters" : {
          "compact" : false,
          "exploreLink" : true,
          "measureField" : "amount_mape_before_adj",
          "numberColor" : "#FFFFFF",
          "numberSize" : 24,
          "showActionMenu" : true,
          "step" : "MAPE_KPI_2",
          "textAlignment" : "left",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "image_1" : {
        "parameters" : {
          "alignmentX" : "center",
          "alignmentY" : "center",
          "fit" : "original",
          "image" : {
            "name" : "${App.Images['manufacturing_app_iconpng112'].Name}",
            "namespace" : "${Org.Namespace}"
          }
        },
        "type" : "image"
      },
      "container_12" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "listselector_12" : {
        "parameters" : {
          "compact" : false,
          "displayMode" : "filter",
          "exploreLink" : false,
          "filterStyle" : {
            "titleColor" : "#FFFFFF",
            "valueColor" : "#FFFFFF"
          },
          "instant" : false,
          "showActionMenu" : false,
          "step" : "measure_selector_for_2",
          "title" : ""
        },
        "type" : "listselector"
      },
      "container_11" : {
        "parameters" : {
          "alignmentX" : "left",
          "alignmentY" : "top",
          "fit" : "original"
        },
        "type" : "container"
      },
      "listselector_11" : {
        "parameters" : {
          "compact" : false,
          "displayMode" : "filter",
          "exploreLink" : false,
          "filterStyle" : {
            "titleColor" : "#FFFFFF",
            "valueColor" : "#FFFFFF"
          },
          "instant" : false,
          "showActionMenu" : false,
          "step" : "measure_selector_for_1",
          "title" : ""
        },
        "type" : "listselector"
      },
      "number_9" : {
        "parameters" : {
          "compact" : true,
          "exploreLink" : true,
          "measureField" : "Forecast_Change_Percent",
          "numberColor" : "#FFFFFF",
          "numberSize" : 24,
          "showActionMenu" : true,
          "step" : "Overall_Forecast_Cha_1",
          "textAlignment" : "left",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "number_8" : {
        "parameters" : {
          "compact" : false,
          "exploreLink" : true,
          "measureField" : "amount_mape",
          "numberColor" : "#FFFFFF",
          "numberSize" : 24,
          "showActionMenu" : true,
          "step" : "mape_KPI",
          "textAlignment" : "left",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "number_7" : {
        "parameters" : {
          "compact" : true,
          "exploreLink" : true,
          "measureField" : "unique_AccountProductForecast.ProductId",
          "numberColor" : "#FFFFFF",
          "numberSize" : 24,
          "showActionMenu" : true,
          "step" : "Account_Product_Coun_1",
          "textAlignment" : "left",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "number_6" : {
        "parameters" : {
          "compact" : true,
          "exploreLink" : true,
          "measureField" : "ForecastAmountGap_before_adj",
          "numberColor" : "#FFFFFF",
          "numberSize" : 24,
          "showActionMenu" : true,
          "step" : "MAPE_KPI_6",
          "textAlignment" : "left",
          "title" : "",
          "titleColor" : "#091A3E",
          "titleSize" : 16
        },
        "type" : "number"
      },
      "dateselector_3" : {
        "parameters" : {
          "absoluteModeEnabled" : true,
          "calendarTypeSwitchingAllowed" : true,
          "defaultFiscalMode" : false,
          "displayMode" : "filter",
          "filterStyle" : {
            "titleColor" : "rgb(84, 105, 141)",
            "valueColor" : "rgb(22, 50, 92)"
          },
          "instant" : false,
          "presetsEnabled" : true,
          "relativeModeEnabled" : true,
          "showActionMenu" : false,
          "step" : "Date_Selector_1",
          "title" : "Forecast Period"
        },
        "type" : "dateselector"
      },
      "listselector_6" : {
        "parameters" : {
          "compact" : false,
          "displayMode" : "filter",
          "exploreLink" : false,
          "filterStyle" : {
            "titleColor" : "#54698D",
            "valueColor" : "#16325C"
          },
          "instant" : true,
          "measureField" : "count",
          "showActionMenu" : true,
          "step" : "Account_Parent_1",
          "title" : "Parent Account"
        },
        "type" : "listselector"
      },
      "listselector_3" : {
        "parameters" : {
          "compact" : false,
          "displayMode" : "filter",
          "exploreLink" : false,
          "filterStyle" : {
            "titleColor" : "#54698D",
            "valueColor" : "#16325C"
          },
          "instant" : false,
          "measureField" : "none",
          "showActionMenu" : false,
          "step" : "Product_Family_1",
          "title" : "Product Family"
        },
        "type" : "listselector"
      },
      "listselector_2" : {
        "parameters" : {
          "compact" : false,
          "displayMode" : "filter",
          "exploreLink" : false,
          "filterStyle" : {
            "titleColor" : "#54698D",
            "valueColor" : "#16325C"
          },
          "instant" : false,
          "measureField" : "none",
          "showActionMenu" : false,
          "step" : "AccountProductForeca_1",
          "title" : "Product Name"
        },
        "type" : "listselector"
      },
      "listselector_5" : {
        "parameters" : {
          "compact" : false,
          "displayMode" : "filter",
          "exploreLink" : false,
          "filterStyle" : {
            "titleColor" : "#54698D",
            "valueColor" : "#16325C"
          },
          "instant" : true,
          "showActionMenu" : false,
          "step" : "static_1",
          "title" : "Adjustment Period"
        },
        "type" : "listselector"
      },
      "listselector_4" : {
        "parameters" : {
          "compact" : false,
          "displayMode" : "filter",
          "exploreLink" : false,
          "filterStyle" : {
            "titleColor" : "#54698D",
            "valueColor" : "#16325C"
          },
          "instant" : true,
          "measureField" : "count",
          "showActionMenu" : true,
          "step" : "Forecast_Status_1",
          "title" : "Forecast Status"
        },
        "type" : "listselector"
      },
      "text_21" : {
        "parameters" : {
          "content" : {
            "displayTemplate" : "   What's the monthly change in forecast for the selected period?"
          },
          "fontSize" : 18,
          "showActionMenu" : false,
          "textAlignment" : "left",
          "textColor" : "#091A3E"
        },
        "type" : "text"
      },
      "navigation_1" : {
        "parameters" : {
          "fontSize" : 16,
          "selectedTab" : {
            "backgroundColor" : "#FFFFFF",
            "borderColor" : "#0070D2",
            "borderEdges" : [
              "bottom"
            ],
            "borderWidth" : 2,
            "textColor" : "#0070D2"
          },
          "tabCount" : 5,
          "textColor" : "#54698D"
        },
        "type" : "navigation"
      },
      "text_20" : {
        "parameters" : {
          "content" : {
            "displayTemplate" : "Selected Adjustment Period: {{coalesce(cell(Min_and_max_dates_1.result,0,cell(static_1.selection, 0, \"Period_Range\")),0).asString()}}"
          },
          "fontSize" : 14,
          "showActionMenu" : true,
          "textAlignment" : "left",
          "textColor" : "#C6D3E1"
        },
        "type" : "text"
      },
      "text_22" : {
        "parameters" : {
          "content" : {
            "displayTemplate" : "    Selected Adjustment Period: {{coalesce(cell(Min_and_max_dates_1.result,0,cell(static_1.selection, 0, \"Period_Range\")),0).asString()}}"
          },
          "fontSize" : 14,
          "showActionMenu" : true,
          "textAlignment" : "left",
          "textColor" : "#091A3E"
        },
        "type" : "text"
      },
      "table_1" : {
        "parameters" : {
          "borderColor" : "#e0e5ee",
          "borderWidth" : 1,
          "cell" : {
            "backgroundColor" : "#ffffff",
            "fontColor" : "#16325c",
            "fontSize" : 12
          },
          "columnProperties" : { },
          "columns" : [ ],
          "customBulkActions" : [ ],
          "exploreLink" : true,
          "header" : {
            "backgroundColor" : "#f4f6f9",
            "fontColor" : "#16325c",
            "fontSize" : 12
          },
          "innerMajorBorderColor" : "#a8b7c7",
          "innerMinorBorderColor" : "#e0e5ee",
          "mode" : "fittocontainer",
          "numberOfLines" : 1,
          "pivoted" : false,
          "showActionMenu" : true,
          "step" : "Details_Table_for_Hi_1",
          "verticalPadding" : 8
        },
        "type" : "table"
      },
      "table_2" : {
        "parameters" : {
          "borderColor" : "#e0e5ee",
          "borderWidth" : 1,
          "cell" : {
            "backgroundColor" : "#ffffff",
            "fontColor" : "#16325c",
            "fontSize" : 12
          },
          "columnProperties" : { },
          "columns" : [ ],
          "customBulkActions" : [ ],
          "exploreLink" : true,
          "header" : {
            "backgroundColor" : "#f4f6f9",
            "fontColor" : "#16325c",
            "fontSize" : 12
          },
          "innerMajorBorderColor" : "#a8b7c7",
          "innerMinorBorderColor" : "#e0e5ee",
          "mode" : "fittocontainer",
          "numberOfLines" : 1,
          "pivoted" : false,
          "showActionMenu" : true,
          "step" : "MAPE_by_Prod_1",
          "verticalPadding" : 8
        },
        "type" : "table"
      },
      "pillbox_2" : {
        "parameters" : {
          "compact" : false,
          "exploreLink" : false,
          "fontSize" : 12,
          "selectedTab" : {
            "backgroundColor" : "rgb(51, 87, 121)",
            "borderColor" : "#C6D3E1",
            "borderEdges" : [ ],
            "borderWidth" : 0,
            "textColor" : "#FFFFFF"
          },
          "showActionMenu" : false,
          "step" : "Qty_vs_Amount_1",
          "textColor" : "rgb(125, 152, 179)"
        },
        "type" : "pillbox"
      },
      "pillbox_1" : {
        "parameters" : {
          "compact" : false,
          "exploreLink" : false,
          "fontSize" : 12,
          "selectedTab" : {
            "backgroundColor" : "rgb(51, 87, 121)",
            "borderColor" : "#C6D3E1",
            "borderEdges" : [ ],
            "borderWidth" : 0,
            "textColor" : "#FFFFFF"
          },
          "showActionMenu" : false,
          "step" : "Prod_vs_Prod_Family_1",
          "textColor" : "rgb(125, 152, 178)"
        },
        "type" : "pillbox"
      },
      "pillbox_3" : {
        "parameters" : {
          "compact" : false,
          "exploreLink" : false,
          "fontSize" : 12,
          "selectedTab" : {
            "backgroundColor" : "rgb(51, 87, 121)",
            "borderColor" : "#C6D3E1",
            "borderEdges" : [ ],
            "borderWidth" : 0,
            "textColor" : "#FFFFFF"
          },
          "showActionMenu" : true,
          "step" : "Qty_vs_Amount_1",
          "textColor" : "rgb(125, 152, 178)"
        },
        "type" : "pillbox"
      },
      "listselector_1" : {
        "parameters" : {
          "compact" : false,
          "displayMode" : "filter",
          "exploreLink" : false,
          "filterStyle" : {
            "titleColor" : "#54698D",
            "valueColor" : "#16325C"
          },
          "instant" : false,
          "measureField" : "none",
          "showActionMenu" : false,
          "step" : "Account_Name_1",
          "title" : "Account Name"
        },
        "type" : "listselector"
      }
    }
  }
}